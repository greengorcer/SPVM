package TestCase::Lib::SPVM::ArrayUtil {
  use SPVM::ArrayUtil(join_object, split, copy_object_array, equals_object_array, sprintf);
  
  use SPVM::Util;
  use SPVM::Unicode (uchar);
  use TestCase::Minimal;
  use SPVM::ArrayUtil (equals_string_array);
  use TestCase::Minimal;
  use SPVM::EqualityChecker;
  use SPVM::ArrayUtil;
  use SPVM::EqualityChecker::SameObject;

  use SPVM::ArrayUtil (
    copy_byte_array,
    copy_short_array,
    copy_int_array,
    copy_long_array,
    copy_float_array,
    copy_double_array,
    copy_string_array,
    equals_byte_array,
    equals_short_array,
    equals_int_array,
    equals_long_array,
    equals_float_array,
    equals_double_array,
    get_type_name,
    dump_byte_array,
    dump_short_array,
    dump_int_array,
    dump_long_array,
    dump_float_array,
    dump_double_array,
    slice_byte,
    slice_short,
    slice_int,
    slice_long,
    slice_float,
    slice_double,
    slice_object,
    memcpy_byte,
    memcpy_short,
    memcpy_int,
    memcpy_long,
    memcpy_float,
    memcpy_double,
    memmove_byte,
    memmove_short,
    memmove_int,
    memmove_long,
    memmove_float,
    memmove_double,
    new_object_array_proto,
  );

  sub test_equals_object_array : int () {
    my $minimal1 = TestCase::Minimal->new;
    my $minimal2 = TestCase::Minimal->new;
    my $minimal3 = TestCase::Minimal->new;
    my $minimal4 = TestCase::Minimal->new;
    my $nums1 = [$minimal1, $minimal2, $minimal3];
    my $nums2 = [$minimal1, $minimal2, $minimal3];
    my $nums3 = [$minimal1, $minimal2];
    my $nums4 = [$minimal1, $minimal2, $minimal4];
    my $nums5 = [(object)$minimal1, $minimal2, $minimal3];

    my $equality_checker = sub : int ($self : self, $object1 : object, $object2 : object) {
      my $minimal1 = (TestCase::Minimal)$object1;
      my $minimal2 = (TestCase::Minimal)$object2;

      if ($minimal1 == $minimal2) {
        return 1;
      }
      else {
        return 0;
      }
    };

    {
      my $is_equals = equals_object_array($nums1, $nums2, $equality_checker);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_object_array($nums1, $nums3, $equality_checker);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_object_array($nums1, $nums4, $equality_checker);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_object_array($nums1, $nums5, $equality_checker);
      unless ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_copy_object_array : int () {
    my $objects = [(object)SPVM::Int->new(1), SPVM::Int->new(2), SPVM::Int->new(SPVM::Util->INT32_MIN())];
    my $objects_out = copy_object_array($objects, sub : object ($self : self, $obj : object) {
      my $int_obj = (SPVM::Int)$obj;
      my $new_int_obj = SPVM::Int->new($int_obj->value);
      return $new_int_obj;
    });

    if ($objects->[0] == $objects_out->[0]) {
      return 0;
    }

    if ($objects->[1] == $objects_out->[1]) {
      return 0;
    }

    if ($objects->[2] == $objects_out->[2]) {
      return 0;
    }

    unless ((int)$objects_out->[0] == 1) {
      return 0;
    }

    unless ((int)$objects_out->[1] == 2) {
      return 0;
    }

    unless ((int)$objects_out->[2] == SPVM::Util->INT32_MIN()) {
      return 0;
    }

    unless (@$objects_out == 3) {
      return 0;
    }

    unless ($objects != $objects_out) {
      return 0;
    }

    return 1;
  }

  sub test_memcpy_byte : int () {

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memcpy_byte($target, 0, $search, 0, 3);
      unless ((string)$target eq (string)"ABCde") {
        return 0;
      }
    }

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memcpy_byte($target, 2, $search, 0, 3);
      unless ((string)$target eq (string)"abABC") {
        return 0;
      }
    }

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memcpy_byte($target, 2, $search, 0, 3);
      unless ((string)$target eq (string)"abABC") {
        return 0;
      }
    }

    return 1;
  }

  sub test_memmove_byte : int () {

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memmove_byte($target, 0, $search, 0, 3);
      unless ((string)$target eq (string)"ABCde") {
        return 0;
      }
    }

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memmove_byte($target, 2, $search, 0, 3);
      unless ((string)$target eq (string)"abABC") {
        return 0;
      }
    }

    {
      my $target = (byte[])"abcde";
      my $search = (byte[])"ABC";
      memmove_byte($target, 2, $search, 0, 3);
      unless ((string)$target eq (string)"abABC") {
        return 0;
      }
    }

    {
      my $target = (byte[])"abcde";
      memmove_byte($target, 0, $target, 2, 2);
      unless ((string)$target eq (string)"cdcde") {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_byte_array : int () {
    # Dump array
    {
      my $nums = [(byte)1, 2, SPVM::Util->INT8_MIN()];

      my $dump = dump_byte_array($nums);
      
      unless ($dump eq "[\n  1,\n  2,\n  -128\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = dump_byte_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_short_array : int () {
    # Dump array
    {
      my $nums = [(short)1, 2, SPVM::Util->INT16_MIN()];

      my $dump = dump_short_array($nums);

      unless ($dump eq "[\n  1,\n  2,\n  -32768\n]") {
        return 0;
      }
    }
    
    # Dump undef
    {
      my $dump = dump_short_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_int_array : int () {
    # Dump array
    {
      my $nums = [(int)1, 2, SPVM::Util->INT32_MIN()];

      my $dump = dump_int_array($nums);

      unless ($dump eq "[\n  1,\n  2,\n  -2147483648\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = dump_int_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }


    return 1;
  }

  sub test_dump_long_array : int () {
    # Dump array
    {
      my $nums = [(long)1, 2, SPVM::Util->INT64_MIN()];

      my $dump = dump_long_array($nums);

      unless ($dump eq "[\n  1,\n  2,\n  -9223372036854775808\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = dump_long_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }


    return 1;
  }

  sub test_dump_float_array : int () {
    # Dump array
    {
      my $nums = [(float)1, 2, 2.45f];

      my $dump = dump_float_array($nums);

      unless ($dump eq "[\n  1,\n  2,\n  2.45\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = dump_float_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_double_array : int () {
    # Dump array
    {
      my $nums = [(double)1, 2, 2.45];

      my $dump = dump_double_array($nums);

      unless ($dump eq "[\n  1,\n  2,\n  2.45\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = dump_double_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_unsigned_byte_array : int () {
    # Dump array
    {
      my $nums = [(byte)1, 2, -1, SPVM::Util->UINT8_MAX];
      
      my $dump = SPVM::ArrayUtil->dump_unsigned_byte_array($nums);
      
      unless ($dump eq "[\n  1,\n  2,\n  255,\n  255\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = SPVM::ArrayUtil->dump_unsigned_byte_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_unsigned_short_array : int () {
    # Dump array
    {
      my $nums = [(short)1, 2, -1, SPVM::Util->UINT16_MAX];
      
      my $dump = SPVM::ArrayUtil->dump_unsigned_short_array($nums);
      
      unless ($dump eq "[\n  1,\n  2,\n  65535,\n  65535\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = SPVM::ArrayUtil->dump_unsigned_short_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_unsigned_int_array : int () {
    # Dump array
    {
      my $nums = [(int)1, 2, -1, SPVM::Util->UINT32_MAX];
      
      my $dump = SPVM::ArrayUtil->dump_unsigned_int_array($nums);
      
      unless ($dump eq "[\n  1,\n  2,\n  4294967295,\n  4294967295\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = SPVM::ArrayUtil->dump_unsigned_int_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_unsigned_long_array : long () {
    # Dump array
    {
      my $nums = [(long)1, 2, -1, SPVM::Util->UINT64_MAX];
      
      my $dump = SPVM::ArrayUtil->dump_unsigned_long_array($nums);
      
      unless ($dump eq "[\n  1,\n  2,\n  18446744073709551615,\n  18446744073709551615\n]") {
        return 0;
      }
    }

    # Dump undef
    {
      my $dump = SPVM::ArrayUtil->dump_unsigned_long_array(undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }

  sub test_dump_object_array : int () {
    
    {
      my $minimals = [
        TestCase::Minimal->newp(1, 2),
        TestCase::Minimal->newp(3, 4),
        TestCase::Minimal->newp(5, 6)
      ];

      my $dump = SPVM::ArrayUtil->dump_object_array($minimals, sub : string ($self : self, $obj : object) {
        my $minimal = (TestCase::Minimal)$obj;
        my $x = $minimal->x;
        my $y = $minimal->y;
        my $str = "($x,$y)";
        return $str;
      });

      if ($dump eq "[\n  (1,2),\n  (3,4),\n  (5,6)\n]") {
        return 1;
      }
    }

    # Dump undef
    {
      my $dump = SPVM::ArrayUtil->dump_object_array(undef, undef);
      
      unless ($dump == undef) {
        return 0;
      }
    }

    return 1;
  }


  sub test_new_object_array_proto : int () {
    my $minimals = new TestCase::Minimal[1];

    my $new_object_array = new_object_array_proto($minimals, 2);
    unless ($new_object_array isa TestCase::Minimal[]) {
      return 0;
    }
    my $new_minimals = (TestCase::Minimal[])$new_object_array;
    unless (@$new_minimals == 2) {
      return 0;
    }

    return 1;
  }
  sub test_slice_byte : int () {
    {
      my $nums = [(byte)5, -7, 9, SPVM::Util->INT8_MIN(), 127, 15, 19];
      my $slice = slice_byte($nums, 0, 7);
      unless (equals_byte_array($slice, [(byte)5, -7, 9, SPVM::Util->INT8_MIN(), 127, 15, 19])) {
        return 0;
      }
    }

    {
      my $nums = [(byte)5, -7, 9, SPVM::Util->INT8_MIN(), 127, 15, 19];
      my $slice = slice_byte($nums, 1, 3);
      unless (equals_byte_array($slice, [(byte)-7, 9, SPVM::Util->INT8_MIN()])) {
        return 0;
      }
    }

    return 1;
  }
  sub test_slice_short : int () {
    {
      my $nums = [(short)5, -7, 9, SPVM::Util->INT16_MIN(), 127, 15, 19];
      my $slice = slice_short($nums, 0, 7);
      unless (equals_short_array($slice, [(short)5, -7, 9, SPVM::Util->INT16_MIN(), 127, 15, 19])) {
        return 0;
      }
    }
    {
      my $nums = [(short)5, -7, 9, SPVM::Util->INT16_MIN(), 127, 15, 19];
      my $slice = slice_short($nums, 1, 3);
      unless (equals_short_array($slice, [(short)-7, 9, SPVM::Util->INT16_MIN()])) {
        return 0;
      }
    }

    return 1;
  }
  sub test_slice_int : int () {
    {
      my $nums = [(int)5, -7, 9, SPVM::Util->INT32_MIN(), 127, 15, 19];
      my $slice = slice_int($nums, 0, 7);
      unless (equals_int_array($slice, [(int)5, -7, 9, SPVM::Util->INT32_MIN(), 127, 15, 19])) {
        return 0;
      }
    }
    {
      my $nums = [(int)5, -7, 9, SPVM::Util->INT32_MIN(), 127, 15, 19];
      my $slice = slice_int($nums, 1, 3);
      unless (equals_int_array($slice, [(int)-7, 9, SPVM::Util->INT32_MIN()])) {
        return 0;
      }
    }
    return 1;
  }
  sub test_slice_long : int () {
    {
      my $nums = [(long)5, -7, 9, SPVM::Util->INT64_MIN(), 127, 15, 19];
      my $slice = slice_long($nums, 0, 7);
      unless (equals_long_array($slice, [(long)5, -7, 9, SPVM::Util->INT64_MIN(), 127, 15, 19])) {
        return 0;
      }
    }
    {
      my $nums = [(long)5, -7, 9, SPVM::Util->INT64_MIN(), 127, 15, 19];
      my $slice = slice_long($nums, 1, 3);
      unless (equals_long_array($slice, [(long)-7, 9, SPVM::Util->INT64_MIN()])) {
        return 0;
      }
    }

    return 1;
  }
  sub test_slice_float : int () {
    {
      my $nums = [(float)5, -7, 9, SPVM::Util->FLT_MIN(), 127, 15, 19];
      my $slice = slice_float($nums, 0, 7);
      unless (equals_float_array($slice, [(float)5, -7, 9, SPVM::Util->FLT_MIN(), 127, 15, 19])) {
        return 0;
      }
    }
    {
      my $nums = [(float)5, -7, 9, SPVM::Util->FLT_MIN(), 127, 15, 19];
      my $slice = slice_float($nums, 1, 3);
      unless (equals_float_array($slice, [(float)-7, 9, SPVM::Util->FLT_MIN()])) {
        return 0;
      }
    }


    return 1;
  }
  sub test_slice_double : int () {
    {
      my $nums = [(double)5, -7, 9, SPVM::Util->DBL_MIN(), 127, 15, 19];
      my $slice = slice_double($nums, 0, 7);
      unless (equals_double_array($slice, [(double)5, -7, 9, SPVM::Util->DBL_MIN(), 127, 15, 19])) {
        return 0;
      }
    }
    {
      my $nums = [(double)5, -7, 9, SPVM::Util->DBL_MIN(), 127, 15, 19];
      my $slice = slice_double($nums, 1, 3);
      unless (equals_double_array($slice, [(double)-7, 9, SPVM::Util->DBL_MIN()])) {
        return 0;
      }
    }
    return 1;
  }
  sub test_slice_object : int () {

    {
      my $minimal1 = TestCase::Minimal->new;
      my $minimal2 = TestCase::Minimal->new;
      my $minimal3 = TestCase::Minimal->new;
      my $minimal4 = TestCase::Minimal->new;

      my $elems = [$minimal1, $minimal2, $minimal3, $minimal4];
      my $slice = (TestCase::Minimal[])slice_object($elems, 0, 4);
      unless (SPVM::ArrayUtil->equals_object_array($slice, [$minimal1, $minimal2, $minimal3, $minimal4], SPVM::EqualityChecker::SameObject->new)) {
        return 0;
      }
    }
    {
      my $minimal1 = TestCase::Minimal->new;
      my $minimal2 = TestCase::Minimal->new;
      my $minimal3 = TestCase::Minimal->new;
      my $minimal4 = TestCase::Minimal->new;

      my $elems = [$minimal1, $minimal2, $minimal3, $minimal4];
      my $slice = (TestCase::Minimal[])slice_object($elems, 1, 2);
      unless (SPVM::ArrayUtil->equals_object_array($slice, [$minimal2, $minimal3], SPVM::EqualityChecker::SameObject->new)) {
        return 0;
      }
    }
    return 1;
  }

  sub test_equals_byte_array : int () {
    my $nums1 = [(byte)0, 1, SPVM::Util->INT8_MIN()];
    my $nums2 = [(byte)0, 1, SPVM::Util->INT8_MIN()];
    my $nums3 = [(byte)0, 1];
    my $nums4 = [(byte)0, 1, 2];
    {
      my $is_equals = equals_byte_array($nums1, $nums2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_byte_array($nums1, $nums3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_byte_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_short_array : int () {
    my $nums1 = [(short)0, 1, SPVM::Util->INT16_MIN()];
    my $nums2 = [(short)0, 1, SPVM::Util->INT16_MIN()];
    my $nums3 = [(short)0, 1];
    my $nums4 = [(short)0, 1, 2];

    {
      my $is_equals = equals_short_array($nums1, $nums2);

      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_short_array($nums1, $nums3);

      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_short_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_int_array : int () {
    my $nums1 = [(int)0, 1, SPVM::Util->INT32_MIN()];
    my $nums2 = [(int)0, 1, SPVM::Util->INT32_MIN()];
    my $nums3 = [(int)0, 1];
    my $nums4 = [(int)0, 1, 2];

    {
      my $is_equals = equals_int_array($nums1, $nums2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_int_array($nums1, $nums3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_int_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_long_array : int () {
    my $nums1 = [(long)0, 1, SPVM::Util->INT64_MIN()];
    my $nums2 = [(long)0, 1, SPVM::Util->INT64_MIN()];
    my $nums3 = [(long)0, 1];
    my $nums4 = [(long)0, 1, 2];

    {
      my $is_equals = equals_long_array($nums1, $nums2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_long_array($nums1, $nums3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_long_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_float_array : int () {
    my $nums1 = [0.0f, 1.5f, SPVM::Util->FLT_MIN()];
    my $nums2 = [0.0f, 1.5f, SPVM::Util->FLT_MIN()];
    my $nums3 = [0.0f, 1.5f];
    my $nums4 = [(float)0.0f, 1.5f, 0.5f];

    {
      my $is_equals = equals_float_array($nums1, $nums2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_float_array($nums1, $nums3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_float_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_double_array : int () {
    my $nums1 = [0.0, 1.5, SPVM::Util->DBL_MIN()];
    my $nums2 = [0.0, 1.5, SPVM::Util->DBL_MIN()];
    my $nums3 = [0.0, 1.5];
    my $nums4 = [(double)0.0, 1.5, 0.5];

    {
      my $is_equals = equals_double_array($nums1, $nums2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_double_array($nums1, $nums3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_double_array($nums1, $nums4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }

  sub test_equals_string_array : int () {
    my $strings1 = ["abc", "def", "ghi"];
    my $strings2 = ["abc", "def", "ghi"];
    my $strings3 = ["abc", "def"];
    my $strings4 = ["abc", "def", "xxx"];

    {
      my $is_equals = equals_string_array($strings1, $strings2);
      unless ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_string_array($strings1, $strings3);
      if ($is_equals) {
        return 0;
      }
    }
    {
      my $is_equals = equals_string_array($strings1, $strings4);
      if ($is_equals) {
        return 0;
      }
    }

    return 1;
  }
  sub test_copy_byte_array : int () {
    my $nums = [(byte)1, 2, SPVM::Util->INT8_MIN()];
    my $nums_out = copy_byte_array($nums);

    unless ($nums->[0] == 1) {
      return 0;
    }

    unless ($nums->[1] == 2) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->INT8_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_short_array : int () {
    my $nums = [(short)1, 2, SPVM::Util->INT16_MIN()];
    my $nums_out = copy_short_array($nums);

    unless ($nums->[0] == 1) {
      return 0;
    }

    unless ($nums->[1] == 2) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->INT16_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_int_array : int () {
    my $nums = [(int)1, 2, SPVM::Util->INT32_MIN()];
    my $nums_out = copy_int_array($nums);

    unless ($nums->[0] == 1) {
      return 0;
    }

    unless ($nums->[1] == 2) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->INT32_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_long_array : int () {
    my $nums = [(long)1, 2, SPVM::Util->INT64_MIN()];
    my $nums_out = copy_long_array($nums);

    unless ($nums->[0] == 1) {
      return 0;
    }

    unless ($nums->[1] == 2) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->INT64_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_float_array : int () {
    my $nums = [(float)0.5f, 0.25f, SPVM::Util->FLT_MIN()];
    my $nums_out = copy_float_array($nums);

    unless ($nums->[0] == 0.5) {
      return 0;
    }

    unless ($nums->[1] == 0.25) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->FLT_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_double_array : int () {
    my $nums = [(double)0.5, 0.25, SPVM::Util->DBL_MIN()];
    my $nums_out = copy_double_array($nums);

    unless ($nums->[0] == 0.5) {
      return 0;
    }

    unless ($nums->[1] == 0.25) {
      return 0;
    }

    unless ($nums->[2] == SPVM::Util->DBL_MIN()) {
      return 0;
    }

    unless (@$nums_out == 3) {
      return 0;
    }

    return 1;
  }

  sub test_copy_string_array : int () {
    my $strings = ["abc", "def", "hij"];
    my $strings_out = copy_string_array($strings);

    unless ($strings->[0] eq $strings_out->[0]) {
      return 0;
    }
    unless ($strings->[1] eq $strings_out->[1]) {
      return 0;
    }
    unless ($strings->[2] eq $strings_out->[2]) {
      return 0;
    }

    unless ($strings->[0] != $strings_out->[0]) {
      return 0;
    }

    unless ($strings->[1] != $strings_out->[1]) {
      return 0;
    }

    unless ($strings->[2] != $strings_out->[2]) {
      return 0;
    }

    unless (@$strings_out == 3) {
      return 0;
    }

    return 1;
  }
}
