package TestCase::Dump {
  use TestCase::DumpTest1;
  use SPVM::StringUtil;

  sub dump_string : string () {
    # dump string
    my $string = "Hello";
    
    my $dump = dump $string;
    
    return $dump;
  }
}

=pod
  sub test_dump : void () {
    # dump
    {
      # string
      {
        my $string = "Hello";
        warn dump $string;
      }

      # undef
      {
        my $string = (string)undef;
        warn dump $string;
      }
      
      # byte array
      {
        my $array = [(byte)1, 2];
        warn dump $array;
      }

      # short array
      {
        my $array = [(short)1, 2];
        warn dump $array;
      }

      # int array
      {
        my $array = [(int)1, 2];
        warn dump $array;
      }

      # long array
      {
        my $array = [(long)1, 2];
        warn dump $array;
      }

      # float array
      {
        my $array = [(float)1.2f, 2.4f];
        warn dump $array;
      }

      # double array
      {
        my $array = [(double)1.2, 2.4];
        warn dump $array;
      }
      
      # byte muti numeric array
      {
        my $array = new TestCase::Point_3b[2];
        $array->[0]{x} = 1;
        $array->[0]{y} = 2;
        $array->[0]{z} = 3;
        $array->[1]{x} = 4;
        $array->[1]{y} = 5;
        $array->[1]{z} = 6;
        warn dump $array;
      }

      # short muti numeric array
      {
        my $array = new TestCase::Point_3s[2];
        $array->[0]{x} = 1;
        $array->[0]{y} = 2;
        $array->[0]{z} = 3;
        $array->[1]{x} = 4;
        $array->[1]{y} = 5;
        $array->[1]{z} = 6;
        warn dump $array;
      }

      # int muti numeric array
      {
        my $array = new TestCase::Point_3i[2];
        $array->[0]{x} = 1;
        $array->[0]{y} = 2;
        $array->[0]{z} = 3;
        $array->[1]{x} = 4;
        $array->[1]{y} = 5;
        $array->[1]{z} = 6;
        warn dump $array;
      }

      # long muti numeric array
      {
        my $array = new TestCase::Point_3f[2];
        $array->[0]{x} = 1;
        $array->[0]{y} = 2;
        $array->[0]{z} = 3;
        $array->[1]{x} = 4;
        $array->[1]{y} = 5;
        $array->[1]{z} = 6;
        warn dump $array;
      }

      # float muti numeric array
      {
        my $array = new TestCase::Point_3f[2];
        $array->[0]{x} = 1.1f;
        $array->[0]{y} = 2.1f;
        $array->[0]{z} = 3.1f;
        $array->[1]{x} = 4.1f;
        $array->[1]{y} = 5.1f;
        $array->[1]{z} = 6.1f;
        warn dump $array;
      }

      # double muti numeric array
      {
        my $array = new TestCase::Point_3d[2];
        $array->[0]{x} = 1.1;
        $array->[0]{y} = 2.1;
        $array->[0]{z} = 3.1;
        $array->[1]{x} = 4.1;
        $array->[1]{y} = 5.1;
        $array->[1]{z} = 6.1;
        warn dump $array;
      }

      # string array
      {
        my $array = ["abc", "def", undef];
        warn dump $array;
      }

      # string array of array
      {
        my $array = [["abc", "def", undef], ["a", "b"]];
        warn dump $array;
      }
      
      # object
      {
        my $object = new TestCase::DumpTest1;
        $object->{byte_value} = 1;
        $object->{short_value} = 2;
        $object->{int_value} = 3;
        $object->{long_value} = 4;
        $object->{float_value} = 1.1f;
        $object->{double_value} = 1.2;
        $object->{string_value} = "a";
        $object->{int_array} = [1, 2, 3];
        $object->{object_value} = new TestCase::DumpTest1;
        
        warn dump $object;
      }

      # object array, reuse, object[]
      {
        my $object = new TestCase::DumpTest1;
        $object->{object_value} = $object;
        
        my $array = [(object)$object, $object, $object];
        
        warn dump $array;
      }
    }
  }
}
=cut
