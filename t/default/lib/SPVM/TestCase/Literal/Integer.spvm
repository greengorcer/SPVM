class TestCase::Literal::Integer {
  use Fn;

  static method integer_literal_decimal_notation : int () {
    
    # 0-9
    {
      my $all_numbers = 1234567890;
      unless ($all_numbers isa int) {
        return 0;
      }
      unless ($all_numbers == 1234567889 + 1) {
        return 0;
      }
    }

    # 0-9 long - suffix L
    {
      my $all_numbers = 1234567890L;
      unless ($all_numbers isa long) {
        return 0;
      }
      unless ($all_numbers == 1234567889L + 1L) {
        return 0;
      }
    }

    # 0-9 long - suffix l
    {
      my $all_numbers = 1234567890l;
      unless ($all_numbers isa long) {
        return 0;
      }
      unless ($all_numbers == 1234567889l + 1l) {
        return 0;
      }
    }
    
    # "-" at the beginning
    {
      my $minus_max = -21;
      unless ($minus_max == -20 - 1) {
        return 0;
      }
    }
    
    # Max int value
    {
      my $int_max = 2147483647;
      unless ($int_max == 2147483646 + 1) {
        return 0;
      }
    }

    # Minimal int value
    {
      my $int_min = -2147483648;
      unless ($int_min == -2147483647 - 1) {
        return 0;
      }
    }

    # Max long value
    {
      my $long_max = 9223372036854775807L;
      unless ($long_max == 9223372036854775806L + 1L) {
        return 0;
      }
    }
    
    # Minimal long value
    {
      my $long_min = -9223372036854775808L;
      unless ($long_min == -9223372036854775807L - 1L) {
        return 0;
      }
    }
    
    # Separator
    {
      # Simple
      {
        my $underline = 123_456_789;
        unless ($underline == 123456789) {
          return 0;
        }
      }

      # More complex
      {
        my $underline = -1_23_456__789_L;
        
        unless ($underline isa long) {
          return 0;
        }
        unless ($underline == -123456789) {
          return 0;
        }
      }
    }
    
    # Combination with the unary "+" operator
    {
      my $plus_max = +2147483647;
      unless ($plus_max == 2147483647) {
        return 0;
      }
    }
    
    return 1;
  }

  static method integer_literal_decimal_notation_extra : int () {
    
    # byte norrowing numeric conversion
    {
      my $byte_norrowing_convertion : byte = -128;
      unless ($byte_norrowing_convertion == -128) {
        return 0;
      }
      return 1;
    }
    
    # short norrowing numeric conversion
    {
      my $short_norrowing_convertion : short = -32768;
      unless ($short_norrowing_convertion == -32768) {
        return 0;
      }
      return 1;
    }
    
    return 1;
  }

  static method integer_literal_hex_notation : int () {
    {
      my $all_numbers1 = 0x01234567;
      my $all_numbers2 = 0x00890000;
      my $all_numbers3 = 0x00ABCDEF;
      my $all_numbers4 = 0x00abcdef;
      unless ($all_numbers1 == 19088743) {
        return 0;
      }
      unless ($all_numbers2 == 8978432) {
        return 0;
      }
      unless ($all_numbers3 == 11259375) {
        return 0;
      }
      unless ($all_numbers4 == 11259375) {
        return 0;
      }
    }
    {
      my $all_f = 0xFFFFFFFF;
      unless ($all_f == -1) {
        return 0;
      }
    }
    {
      my $max_int = 0x7FFFFFFF;
      unless ($max_int == Fn->INT32_MAX()) {
        return 0;
      }
    }
    {
      my $min_int = 0x80000000;
      unless ($min_int == Fn->INT32_MIN()) {
        return 0;
      }
    }
    {
      my $combination = -0x000000FF_FFFFFFFFL;
      unless ($combination == -1099511627775L) {
        return 0;
      }
    }
    {
      my $long_all_f = 0xFFFFFFFF_FFFFFFFFL;
      unless ($long_all_f == -1L) {
        return 0;
      }
    }

    return 1;
  }
  
  # octal
  static method octal_all_numbers : int () {
    my $all_numbers = 012345670;
    unless ($all_numbers == 2739128) {
      return 0;
    }
    return 1;
  }
  static method octal_combination : int () {
    my $combination = -0777_777777777777777777L;
    unless ($combination == -9223372036854775807L) {
      return 0;
    }
    return 1;
  }
  
  # binary
  static method binary_all_numbers : int () {
    my $all_numbers = 0b10101010;
    unless ($all_numbers == 170) {
      return 0;
    }
    return 1;
  }
  static method binary_combination : int () {
    my $combination = -0b11111111_1111111111111111111111111111111111111111111111111111111L;
    unless ($combination == -9223372036854775807L) {
      return 0;
    }
    
    return 1;
  }
}
