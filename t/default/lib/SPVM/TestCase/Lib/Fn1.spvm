class TestCase::Lib::Fn1 {
  use Fn;
  use TestCase::Minimal;

  static method chr : int () {
    
    {
      unless (Fn->chr(0) eq "\0") {
        return 0;
      }

      unless (Fn->chr('0') eq "0") {
        return 0;
      }

      unless (Fn->chr('a') eq "a") {
        return 0;
      }

      unless (Fn->chr(0x3042) eq "あ") {
        return 0;
      }
      
      if (Fn->chr(-1)) {
        return 0;
      }

      unless (Fn->chr(0xD800 - 1)) {
        return 0;
      }

      if (Fn->chr(0xD800)) {
        return 0;
      }

      if (Fn->chr(0xDFFF)) {
        return 0;
      }

      unless (Fn->chr(0xDFFF + 1)) {
        return 0;
      }

      unless (Fn->chr(0x10FFFF)) {
        return 0;
      }

      if (Fn->chr(0x10FFFF + 1)) {
        return 0;
      }
    }
    
    return 1;
  }

  static method ord : int () {
    
    unless (Fn->ord("a") == 97) {
      return 0;
    }
    unless (Fn->ord("ab") == 97) {
      return 0;
    }
    unless (Fn->ord("\x00") == 0) {
      return 0;
    }
    
    unless (Fn->ord("\x01") == 1) {
      return 0;
    }

    unless (Fn->ord("\x7F") == 127) {
      return 0;
    }

    unless (Fn->ord("あ") == 12354) {
      return 0;
    }
    
    # Unicode max scalar value
    unless (Fn->ord(Fn->chr(0x10FFFF)) == 0x10FFFF) {
      return 0;
    }
    
    # Error
    {
      unless (Fn->ord("") < 0) {
        return 0;
      }
      unless (Fn->ord(undef) < 0) {
        return 0;
      }
    }
    
    return 1;
  }

  static method repeat : int () {
    
    unless (Fn->repeat("abc", 3) eq "abcabcabc") {
      return 0;
    }

    # Exception
    {
      eval { Fn->repeat(undef, 1); };
      unless ($@) {
        return 0;
      }
      
      eval { Fn->repeat("abc", 0); };
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }

  static method get_next_code_point : int () {
    
    {
      my $str = "あaい";
      
      my $pos = 0;
      
      # あ
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 0x3042) {
          return 0;
        }
        
        unless ($pos == 3) {
          return 0;
        }
      }

      # a
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 'a') {
          return 0;
        }
        
        unless ($pos == 4) {
          return 0;
        }
      }

      # い
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 0x3044) {
          return 0;
        }
        
        unless ($pos == 7) {
          return 0;
        }
      }
      
      # End
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);
      
        unless ($uchar == -1) {
          return 0;
        }
      }
    }

    {
      my $str = "あaい";
      my $code_points = [0x3042, 'a', 0x3044];
      
      my $pos = 0;
      my $i = 0;
      while ((my $uchar = Fn->get_next_code_point($str, \$pos)) >= 0) {
        
        unless ($uchar == $code_points->[$i]) {
          return 0;
        }
        
        $i++;
      }
    }
      
    return 1;
  }

  static method look_next_code_point : int () {
    
    {
      my $str = "あaい";
      
      my $pos = 0;
      
      # あ
      {
        my $uchar = Fn->look_next_code_point($str, \$pos);

        unless ($uchar == 0x3042) {
          return 0;
        }
        
        unless ($pos == 0) {
          return 0;
        }
      }
    }
    
    return 1;
  }
}
