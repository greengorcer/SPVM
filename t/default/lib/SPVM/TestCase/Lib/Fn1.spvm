class TestCase::Lib::Fn1 {
  use Fn;
  use Unicode as Un;

  static method test_sprintf_d : int () {
    my $tests = [
        [ Fn->sprintf("abc%d", 123),          "abc123" ],
        [ Fn->sprintf("%dabc", 123),          "123abc" ],
        [ Fn->sprintf("%dabc%d", 1, 10),      "1abc10" ],
        [ Fn->sprintf("%d%d%d", 1, 10, 100),  "110100" ],
        [ Fn->sprintf("%d%d%d", 1, 10, 100),  "110100" ],
        [ Fn->sprintf("%05d", 123),           "00123"  ],
        [ Fn->sprintf("%+5d", 123),           " +123"  ],
        [ Fn->sprintf("%-5d", 123),           "123  "  ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%d", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_u : int () {
    my $tests = [
        [ Fn->sprintf("abc%u", 123),          "abc123" ],
        [ Fn->sprintf("%uabc", 123),          "123abc" ],
        [ Fn->sprintf("%uabc%u", 1, 10),      "1abc10" ],
        [ Fn->sprintf("%u%u%u", 1, 10, 100),  "110100" ],
        [ Fn->sprintf("%05u", 123),           "00123"  ],
        [ Fn->sprintf("%+5u", 123),           " +123"  ],
        [ Fn->sprintf("%-5u", 123),           "123  "  ],
        [ Fn->sprintf("%-5u", 123),           "123  "  ],
        [ Fn->sprintf("%u", -1),              "4294967295" ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%d", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_ld : int () {
    my $tests = [
        [ Fn->sprintf("abc%ld", 10000000000L),                                "abc10000000000"                    ],
        [ Fn->sprintf("%ldabc", 10000000000L),                                "10000000000abc"                    ],
        [ Fn->sprintf("%ldabc%ld", 10000000000L, 20000000000L),               "10000000000abc20000000000"         ],
        [ Fn->sprintf("%ld%ld%ld", 10000000000L, 20000000000L, 30000000000L), "100000000002000000000030000000000" ],
        [ Fn->sprintf("%013ld", 12345678901L),                                "0012345678901"                     ],
        [ Fn->sprintf("%+13ld", 12345678901L),                                " +12345678901"                     ],
        [ Fn->sprintf("%-13ld", 12345678901L),                                "12345678901  "                     ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%ld", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Fn->sprintf("%l", 1L);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: \"%l\"", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_lu : int () {
    my $tests = [
        [ Fn->sprintf("abc%lu", 10000000000L),                                "abc10000000000"                    ],
        [ Fn->sprintf("%luabc", 10000000000L),                                "10000000000abc"                    ],
        [ Fn->sprintf("%luabc%lu", 10000000000L, 20000000000L),               "10000000000abc20000000000"         ],
        [ Fn->sprintf("%lu%ld%lu", 10000000000L, 20000000000L, 30000000000L), "100000000002000000000030000000000" ],
        [ Fn->sprintf("%013lu", 12345678901L),                                "0012345678901"                     ],
        [ Fn->sprintf("%+13lu", 12345678901L),                                " +12345678901"                     ],
        [ Fn->sprintf("%-13lu", 12345678901L),                                "12345678901  "                     ],
        [ Fn->sprintf("%lu", -1L),                                            "18446744073709551615"              ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%ld", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Fn->sprintf("%l", 1L);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: \"%l\"", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_f : int () {
    my $tests = [
        [ Fn->sprintf("abc%.2f", 3.1415),                  "abc3.14"      ],
        [ Fn->sprintf("%.2fabc", 3.14),                  "3.14abc"      ],
        [ Fn->sprintf("%.2fabc%.2f", 3.14, 2.71),        "3.14abc2.71"  ],
        [ Fn->sprintf("%.2f%.2f%.2f", 3.14, 2.71, 2.67), "3.142.712.67" ],
        [ Fn->sprintf("%.10f", 3.14),                    "3.1400000000" ],
        [ Fn->sprintf("%012.6f", 3.14),                  "00003.140000" ],
        [ Fn->sprintf("%+12.6f", 3.14),                  "   +3.140000" ],
        [ Fn->sprintf("%-12.6f", 3.14),                  "3.140000    " ],
        [ Fn->sprintf("%+-12.6f", 3.14),                 "+3.140000   " ],
        [ Fn->sprintf("%g", 3.14),                       "3.14"         ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%f", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_c : int () {
    my $tests = [
        [ Fn->sprintf("abc%c", 'x'),            "abcx"  ],
        [ Fn->sprintf("%cabc", 'x'),            "xabc"  ],
        [ Fn->sprintf("%cabc%c", 'x', 'y'),     "xabcy" ],
        [ Fn->sprintf("%c%c%c", 'x', 'y', 'z'), "xyz"   ],
        [ Fn->sprintf("%05c", 'x'),             "0000x" ],
        [ Fn->sprintf("%-5c", 'x'),             "x    " ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%c", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_s : int () {
    my $tests = [
        [ Fn->sprintf("abc%s", "ABC"),                "abcABC"    ],
        [ Fn->sprintf("%sabc", "ABC"),                "ABCabc"    ],
        [ Fn->sprintf("%sabc%s", "ABC", "XYZ"),       "ABCabcXYZ" ],
        [ Fn->sprintf("%s%s%s", "ABC", "XYZ", "123"), "ABCXYZ123" ],
        [ Fn->sprintf("%05s", "str"),                 "00str"     ],
        [ Fn->sprintf("%-5s", "str"),                 "str  "     ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%s", 1);
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  private static method _first_uchar : int ($string : string) {
    my $uchar_pos = 0;
    return Un->uchar($string, \$uchar_pos);
  }

  static method test_sprintf_U : int () {
    my $tests = [
        [ Fn->sprintf("abc%U", TestCase::Lib::Fn->_first_uchar("あ")), "abcあ" ],
        [ Fn->sprintf("%Uabc", TestCase::Lib::Fn->_first_uchar("あ")), "あabc" ],
        [ Fn->sprintf("%Uabc%U", TestCase::Lib::Fn->_first_uchar("あ"), TestCase::Lib::Fn->_first_uchar("い")), "あabcい" ],
        [ Fn->sprintf("%U%U%U", TestCase::Lib::Fn->_first_uchar("あ"), TestCase::Lib::Fn->_first_uchar("い"), TestCase::Lib::Fn->_first_uchar("う")), "あいう" ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    {
      eval {
        Fn->sprintf("%U", "str");
      };
      unless ($@ && Fn->index($@, "Can't cast", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method test_sprintf_percent : int () {
    my $tests = [
        [ Fn->sprintf("%d%%",    1), "1%"    ],
        [ Fn->sprintf("%%%d",    1), "%1"    ],
        [ Fn->sprintf("%d%%str", 1), "1%str" ],
    ];
    for (my $i = 0; $i < @$tests; ++$i) {
      unless ($tests->[$i][0] eq $tests->[$i][1]) {
        warn("got: '" . $tests->[$i][0] . "', expected: '" . $tests->[$i][1] . "'");
        return 0;
      }
    }
    return 1;
  }

  static method test_sprintf_all : int () {
    {
      # Invalid conversion (end of string)
      eval {
        Fn->sprintf("%d%", 1);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: end of string", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (unknown specifier)
      eval {
        Fn->sprintf("%d%k", 1, 2);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: \"%k\"", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (no type)
      eval {
        Fn->sprintf("%012.3", 3.14);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: \"%012.3\"", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      # Missing argument
      eval {
        Fn->sprintf("%d%d", 1);
      };
      unless ($@ && Fn->index($@, "Missing argument in sprintf", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      my $string = "abc\n";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "abc";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "";
      my $ret = Fn->chompr($string);
      unless ($ret eq "") {
        return 0;
      }
    }

    return 1;
  }
}
