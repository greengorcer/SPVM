class TestCase::Lib::Fn1 {
  use Fn;
  use TestCase::Minimal;

  static method sprintf_d : int () {
    unless (Fn->sprintf("%d", 123) eq "123") {
      return 0;
    }
    
    unless (Fn->sprintf("%d", 123) eq "123") {
      return 0;
    }
    unless (Fn->sprintf("%5d", 123) eq "  123") {
      return 0;
    }
    unless (Fn->sprintf("%05d", 123) eq "00123") {
      return 0;
    }
    unless (Fn->sprintf("%+5d", 123) eq " +123") {
      return 0;
    }
    unless (Fn->sprintf("%-5d", 123) eq "123  ") {
      return 0;
    }
    unless (Fn->sprintf("%-05d", 123) eq "123  ") {
      return 0;
    }
    unless (Fn->sprintf("%d", -123) eq "-123") {
      return 0;
    }
    unless (Fn->sprintf("%+5d", -123) eq " -123") {
      return 0;
    }
    unless (Fn->sprintf("%d", -2147483648) eq "-2147483648") {
      return 0;
    }
    unless (Fn->sprintf("%3d", -2147483648) eq "-2147483648") {
      return 0;
    }
    
    
    # Invalid type
    {
      eval {
        Fn->sprintf("%d", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_u : int () {
    unless (Fn->sprintf("%u", 123) eq "123") { return 0; }
    unless (Fn->sprintf("%05u", 123) eq "00123") { return 0; }
    unless (Fn->sprintf("%+5u", 123) eq "  123") { return 0; }
    unless (Fn->sprintf("%-5u", 123) eq "123  ") { return 0; }
    unless (Fn->sprintf("%u", -1) eq "4294967295") { return 0; }

    {
      eval {
        Fn->sprintf("%d", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_ld : int () {
    unless (Fn->sprintf("%ld", 10000000000L) eq "10000000000") { return 0; }
    unless (Fn->sprintf("%013ld", 12345678901L) eq "0012345678901") { return 0; }
    unless (Fn->sprintf("%+13ld", 12345678901L) eq " +12345678901") { return 0; }
    unless (Fn->sprintf("%-13ld", 12345678901L) eq "12345678901  ") { return 0; }
    unless (Fn->sprintf("%ld", -9223372036854775808L) eq "-9223372036854775808") {
      return 0;
    }
    unless (Fn->sprintf("%3ld", -9223372036854775808L) eq "-9223372036854775808") {
      return 0;
    }
    {
      eval {
        Fn->sprintf("%ld", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Fn->sprintf("%l", 1L);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_lu : int () {
    unless (Fn->sprintf("%lu", 10000000000L) eq "10000000000") { return 0; }
    unless (Fn->sprintf("%013lu", 12345678901L) eq "0012345678901") { return 0; }
    unless (Fn->sprintf("%+13lu", 12345678901L) eq "  12345678901") { return 0; }
    unless (Fn->sprintf("%-13lu", 12345678901L) eq "12345678901  ") { return 0; }
    unless (Fn->sprintf("%lu", -1L) eq "18446744073709551615") { return 0; }
    {
      eval {
        Fn->sprintf("%ld", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Fn->sprintf("%l", 1L);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_f : int () {
    unless (Fn->sprintf("%f", 3.1415) eq "3.141500") { return 0; }
    unless (Fn->sprintf("%.2f", 3.1415) eq "3.14") { return 0; }
    unless (Fn->sprintf("%.10f", 3.14) eq "3.1400000000") { return 0; }
    unless (Fn->sprintf("%012.6f", 3.14) eq "00003.140000") { return 0; }
    unless (Fn->sprintf("%+12.6f", 3.14) eq "   +3.140000") { return 0; }
    unless (Fn->sprintf("%-12.6f", 3.14) eq "3.140000    ") { return 0; }
    unless (Fn->sprintf("%+-12.6f", 3.14) eq "+3.140000   ") { return 0; }
    unless (Fn->sprintf("%.300f", 1.0) eq ("1." . Fn->repeat("0", 300))) { return 0; }
    unless (Fn->sprintf("%10.300f", 1.0) eq ("1." . Fn->repeat("0", 300))) { return 0; }
    
    # Float
    {
      unless (Fn->sprintf("%.2f", 3.1415f) eq "3.14") { return 0; }
    }
    
    {
      eval {
        Fn->sprintf("%f", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_g : int () {
    unless (Fn->sprintf("%g", 3.14) eq "3.14") { return 0; }
    unless (Fn->sprintf("%.2g", 3.14) eq "3.1") { return 0; }
    unless (Fn->sprintf("%-+10.2g", 3.14) eq "+3.1      ") { return 0; }

    unless (Fn->sprintf("%g", 3.14f) eq "3.14") { return 0; }
    
    {
      eval {
        Fn->sprintf("%g", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_c : int () {
    unless (Fn->sprintf("%c", 'x') eq "x") { return 0; }
    unless (Fn->sprintf("%05c", 'x') eq "0000x") { return 0; }
    unless (Fn->sprintf("%-5c", 'x') eq "x    ") { return 0; }
    unless (Fn->sprintf("%+c", 'x') eq "x") { return 0; }
    
    # UTF-8
    {
      unless (Fn->sprintf("%c", Fn->ord("あ")) eq "あ") { return 0; }
      
      unless (Fn->sprintf("%05c", Fn->ord("あ")) eq "00あ") { return 0; }
      unless (Fn->sprintf("%-5c", Fn->ord("あ")) eq "あ  ") { return 0; }
      unless (Fn->sprintf("%+c", Fn->ord("あ")) eq "あ") { return 0; }
    }

    {
      eval {
        Fn->sprintf("%c", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_s : int () {
    unless (Fn->sprintf("%s", "ABC") eq "ABC") { return 0; }
    unless (Fn->sprintf("%05s", "str") eq "00str") { return 0; }
    unless (Fn->sprintf("%-5s", "str") eq "str  ") { return 0; }
    unless (Fn->sprintf("%+s", "str") eq "str") { return 0; }
    {
      eval {
        Fn->sprintf("%s", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method sprintf_percent : int () {
    unless (Fn->sprintf("%d%%",    1) eq "1%") { return 0; }
    unless (Fn->sprintf("%%%d",    1) eq "%1") { return 0; }
    unless (Fn->sprintf("%d%%str", 1) eq "1%str") { return 0; }
    return 1;
  }

  static method sprintf_x : int () {
    
    unless (Fn->sprintf("%x", 0) eq "0") {
      return 0;
    }
    unless (Fn->sprintf("%x", 255) eq "ff") {
      return 0;
    }
    unless (Fn->sprintf("%x", -1) eq "ffffffff") {
      return 0;
    }
    unless (Fn->sprintf("%08x", 255) eq "000000ff") {
      return 0;
    }
    
    # Ignore "+"
    unless (Fn->sprintf("%+08x", 255) eq "000000ff") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Fn->sprintf("%-08x", 255) eq "ff      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Fn->sprintf("%x", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_X : int () {
    
    unless (Fn->sprintf("%X", 0) eq "0") {
      return 0;
    }
    
    unless (Fn->sprintf("%X", 255) eq "FF") {
      return 0;
    }
    unless (Fn->sprintf("%X", -1) eq "FFFFFFFF") {
      return 0;
    }
    unless (Fn->sprintf("%X", 10) eq "A") {
      return 0;
    }
    unless (Fn->sprintf("%X", 11) eq "B") {
      return 0;
    }
    unless (Fn->sprintf("%X", 12) eq "C") {
      return 0;
    }
    unless (Fn->sprintf("%X", 13) eq "D") {
      return 0;
    }
    unless (Fn->sprintf("%X", 14) eq "E") {
      return 0;
    }
    unless (Fn->sprintf("%X", 15) eq "F") {
      return 0;
    }
    unless (Fn->sprintf("%08X", 255) eq "000000FF") {
      return 0;
    }
    
    # Ignore "+"
    unless (Fn->sprintf("%+08X", 255) eq "000000FF") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Fn->sprintf("%-08X", 255) eq "FF      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Fn->sprintf("%X", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_lx : int () {
    
    unless (Fn->sprintf("%lx", 0L) eq "0") {
      return 0;
    }
    unless (Fn->sprintf("%lx", 255L) eq "ff") {
      return 0;
    }
    unless (Fn->sprintf("%lx", -1L) eq "ffffffffffffffff") {
      return 0;
    }
    unless (Fn->sprintf("%08lx", 255L) eq "000000ff") {
      return 0;
    }
    
    # Ignore "+"
    unless (Fn->sprintf("%+08lx", 255L) eq "000000ff") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Fn->sprintf("%-08lx", 255L) eq "ff      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Fn->sprintf("%lx", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_lX : int () {
    
    unless (Fn->sprintf("%lX", 0L) eq "0") {
      return 0;
    }
    unless (Fn->sprintf("%lX", 255L) eq "FF") {
      return 0;
    }
    unless (Fn->sprintf("%lX", -1L) eq "FFFFFFFFFFFFFFFF") {
      return 0;
    }
    unless (Fn->sprintf("%08lX", 255L) eq "000000FF") {
      return 0;
    }
    
    # Ignore "+"
    unless (Fn->sprintf("%+08lX", 255L) eq "000000FF") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Fn->sprintf("%-08lX", 255L) eq "FF      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Fn->sprintf("%lX", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_all : int () {
    {
      # Invalid conversion (end of string)
      eval {
        Fn->sprintf("%d%", 1);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: end of string", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (unknown specifier)
      eval {
        Fn->sprintf("%d%k", 1, 2);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (no type)
      eval {
        Fn->sprintf("%012.3", 3.14);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      # Missing argument
      eval {
        Fn->sprintf("%d%d", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      my $string = "abc\n";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "abc";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "";
      my $ret = Fn->chompr($string);
      unless ($ret eq "") {
        return 0;
      }
    }

    return 1;
  }

  static method chr : int () {
    
    {
      unless (Fn->chr(0) eq "\0") {
        return 0;
      }

      unless (Fn->chr('0') eq "0") {
        return 0;
      }

      unless (Fn->chr('a') eq "a") {
        return 0;
      }

      unless (Fn->chr(0x3042) eq "あ") {
        return 0;
      }
      
      if (Fn->chr(-1)) {
        return 0;
      }

      unless (Fn->chr(0xD800 - 1)) {
        return 0;
      }

      if (Fn->chr(0xD800)) {
        return 0;
      }

      if (Fn->chr(0xDFFF)) {
        return 0;
      }

      unless (Fn->chr(0xDFFF + 1)) {
        return 0;
      }

      unless (Fn->chr(0x10FFFF)) {
        return 0;
      }

      if (Fn->chr(0x10FFFF + 1)) {
        return 0;
      }
    }
    
    return 1;
  }

  static method ord : int () {
    
    unless (Fn->ord("a") == 97) {
      return 0;
    }
    unless (Fn->ord("ab") == 97) {
      return 0;
    }
    unless (Fn->ord("\x00") == 0) {
      return 0;
    }
    
    unless (Fn->ord("\x01") == 1) {
      return 0;
    }

    unless (Fn->ord("\x7F") == 127) {
      return 0;
    }

    unless (Fn->ord("あ") == 12354) {
      return 0;
    }
    
    # Unicode max scalar value
    unless (Fn->ord(Fn->chr(0x10FFFF)) == 0x10FFFF) {
      return 0;
    }
    
    # Error
    {
      unless (Fn->ord("") < 0) {
        return 0;
      }
      unless (Fn->ord(undef) < 0) {
        return 0;
      }
    }
    
    return 1;
  }

  static method repeat : int () {
    
    unless (Fn->repeat("abc", 3) eq "abcabcabc") {
      return 0;
    }

    # Exception
    {
      eval { Fn->repeat(undef, 1); };
      unless ($@) {
        return 0;
      }
      
      eval { Fn->repeat("abc", 0); };
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }

  static method get_next_code_point : int () {
    
    {
      my $str = "あaい";
      
      my $pos = 0;
      
      # あ
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 0x3042) {
          return 0;
        }
        
        unless ($pos == 3) {
          return 0;
        }
      }

      # a
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 'a') {
          return 0;
        }
        
        unless ($pos == 4) {
          return 0;
        }
      }

      # い
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);

        unless ($uchar == 0x3044) {
          return 0;
        }
        
        unless ($pos == 7) {
          return 0;
        }
      }
      
      # End
      {
        my $uchar = Fn->get_next_code_point($str, \$pos);
      
        unless ($uchar == -1) {
          return 0;
        }
      }
    }

    {
      my $str = "あaい";
      my $code_points = [0x3042, 'a', 0x3044];
      
      my $pos = 0;
      my $i = 0;
      while ((my $uchar = Fn->get_next_code_point($str, \$pos)) >= 0) {
        
        unless ($uchar == $code_points->[$i]) {
          return 0;
        }
        
        $i++;
      }
    }
      
    return 1;
  }

  static method look_next_code_point : int () {
    
    {
      my $str = "あaい";
      
      my $pos = 0;
      
      # あ
      {
        my $uchar = Fn->look_next_code_point($str, \$pos);

        unless ($uchar == 0x3042) {
          return 0;
        }
        
        unless ($pos == 0) {
          return 0;
        }
      }
    }
    
    return 1;
  }
}
