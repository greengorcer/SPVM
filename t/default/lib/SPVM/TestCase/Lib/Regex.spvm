class TestCase::Lib::Regex {
  use Regex;
  
  static method compile : int () {
    my $re = Regex->new("abc");
    
    return 1;
  }

  static method replace_all_cb : int () {

    # Replace all callback with capture
    {
      my $re = Regex->new("a(bc)");
      my $target = "ppzabczabcz";
      my $result = $re->replace_all_cb($target, 0, method : string ($re : Regex) {
        return "ABC" . $re->captures->[0] . "PQRS";
      });
      
      unless ($re->replace_count == 2) {
        return 0;
      }
      
      unless ($result eq "ppzABCbcPQRSzABCbcPQRSz") {
        return 0;
      }
    }
    
    return 1;
  }

  static method replace_all : int () {
    # Replace all
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabcz";
      my $result = $re->replace_all($target, 0, "ABC");
      
      unless ($re->replace_count == 2) {
        return 0;
      }
      
      unless ($result eq "ppzABCzABCz") {
        return 0;
      }
    }

    # Replace all offset
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabczabcz";
      my $result = $re->replace_all($target, 6, "ABC");
      
      unless ($re->replace_count == 2) {
        return 0;
      }
      
      unless ($result eq "ppzabczABCzABCz") {
        return 0;
      }
    }

    # Replace all with number
    {
      my $re = Regex->new_with_options("a\d+b", "a");
      my $target = "za123bz";
      my $result = $re->replace_all($target, 0, "ABC");
      
      unless ($re->replace_count == 1) {
        return 0;
      }
      
      unless ($result eq "zABCz") {
        return 0;
      }
    }

    # Replace all - Not replace_all
    {
      my $re = Regex->new_with_options("a\d+b", "a");
      my $target = "pppp";
      my $result = $re->replace_all($target, 0, "ABC");
      
      unless ($re->replace_count == 0) {
        return 0;
      }
      
      unless ($result eq "pppp") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method replace : int () {
    # Replace
    {
      my $re = Regex->new("abc");
      my $target = "ppzabcz";
      my $result = $re->replace($target, 0, "ABC");
      
      unless ($re->replace_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzABCz") {
        return 0;
      }
    }

    # Replace offset
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabczabcz";
      my $result = $re->replace($target, 6, "ABC");
      
      unless ($re->replace_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzabczABCzabcz") {
        return 0;
      }
    }

    # Replace with number
    {
      my $re = Regex->new_with_options("a\d+b", "a");
      my $target = "za123bz";
      my $result = $re->replace($target, 0, "ABC");
      
      unless ($re->replace_count == 1) {
        return 0;
      }
      
      unless ($result eq "zABCz") {
        return 0;
      }
    }

    # Replace - Not replaced
    {
      my $re = Regex->new_with_options("a\d+b", "a");
      my $target = "pppp";
      my $result = $re->replace($target, 0, "ABC");
      
      unless ($re->replace_count == 0) {
        return 0;
      }
      
      unless ($result eq "pppp") {
        return 0;
      }
    }

    return 1;
  }

  static method replace_cb : int () {
    # Replace callback with capture
    {
      my $re = Regex->new("a(bc)");
      my $target = "ppzabcz";
      my $result = $re->replace_cb($target, 0, method : string ($re : Regex) {
        return "AB" . $re->captures->[0] . "C";
      });
      
      unless ($re->replace_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzABbcCz") {
        return 0;
      }
    }
    return 1;
  }
  
  static method match_start_and_end : int () {
    # Match start and end
    {
      my $re = Regex->new("abc");
      my $target = "ppzabcz";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->match_start == 3) {
        return 0;
      }
      unless ($re->match_length == 3) {
        return 0;
      }
    }

    # Match start UTF-8
    {
      my $re = Regex->new("あい[かきくけこ]+う");
      my $target = "んんあいかくこうん";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->match_start == 6) {
        return 0;
      }
      unless ($re->match_length == 18) {
        return 0;
      }
    }

    # Match start zero width
    {
      my $re = Regex->new("b*c");
      my $target = "zzcz";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->match_start == 2) {
        return 0;
      }
      unless ($re->match_length == 1) {
        return 0;
      }
    }


    # Match start zero width only
    {
      my $re = Regex->new("b*");
      my $target = "zzcz";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->match_start == 0) {
        return 0;
      }
      unless ($re->match_length == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method match_capture : int ()  {
    # Capture zero more only
    {
      my $re = Regex->new("(a*)");
      my $target = "aaa";
      $re->match($target, 0);
      unless ($re->captures->[0] eq "aaa") {
        return 0;
      }
    }
    
    # Capture a char
    {
      my $re = Regex->new("a(b)c");
      my $target = "zabcz";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "b") {
        return 0;
      }
    }

    # Capture a char UTF-8
    {
      my $re = Regex->new("あ(い)う");
      my $target = "んあいうん";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "い") {
        return 0;
      }
    }

    # Capture a char zero width
    {
      my $re = Regex->new("a(b?)c");
      my $target = "zacz";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "") {
        return 0;
      }
    }

    # Capture char class-and quantifier
    {
      my $re = Regex->new_with_options("\-(\w+)\-", "a");
      my $target = "-abc89-";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }

      
      unless ($re->captures->[0] eq "abc89") {
        return 0;
      }
    }

    # Capture many strings 
    {
      my $re = Regex->new_with_options("\-(\w+) (\w+) (\w+) (\w+) (\w+)", "a");
      my $target = "-abc1 abc2 abc3 abc4 abc5 abc6-";
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "abc1") {
        return 0;
      }

      unless ($re->captures->[1] eq "abc2") {
        return 0;
      }

      unless ($re->captures->[2] eq "abc3") {
        return 0;
      }

      unless ($re->captures->[3] eq "abc4") {
        return 0;
      }

      unless ($re->captures->[4] eq "abc5") {
        return 0;
      }
    }

    # Capture error
    {
      eval { Regex->new(")abc"); };
      unless ($@) {
        return 0;
      }
      eval { Regex->new("((abc)"); };
      unless ($@) {
        return 0;
      }
      
      $@ = undef;
    }
    
    # Capture zero more only
    {
      my $re = Regex->new("(a*)");
      my $target = "aaa";
      $re->match($target, 0);
      unless ($re->captures->[0] eq "aaa") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method match_char_class_range : int ()  {
    # Match char class-range
    {
      my $re = Regex->new("[0-9]+");
      my $target = "z09az";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match char class-range
    {
      my $re = Regex->new("[0-9a-c]+");
      my $target = "zz";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    # .
    {
      my $re = Regex->new("(.+)");
      my $target = "abc\ndef";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "abc") {
        return 0;
      }
    }
    
    # . - single line mode
    {
      my $re = Regex->new_with_options("(.+)", "s");
      my $target = "abc\ndef";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
      
      unless ($re->captures->[0] eq "abc\ndef") {
        return 0;
      }
    }

    return 1;
  }

  static method match_char_class_negate : int () {

    # Match char class-negate
    {
      my $re = Regex->new("[^0-9]+");
      my $target = "zabcz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Not match char class-negate
    {
      my $re = Regex->new("[^0-9]+");
      my $target = "012";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }

    # Match char class-negate UTF-8
    {
      my $re = Regex->new("[^あ]+");
      my $target = "いうえ";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Don't Match char class-negate UTF-8
    {
      my $re = Regex->new("[^あ]+");
      my $target = "あああ";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }

    return 1;
  }
  
  static method match_char_class : int () {

    # Match char class
    {
      my $re = Regex->new("[bcdあ]+");
      my $target = "zabcあz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match char class-\d
    {
      my $re = Regex->new_with_options("[\da]+", "a");
      my $target = "z01az";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match char class
    {
      my $re = Regex->new_with_options("[bcd\d]+", "a");
      my $target = "ae";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_not_space : int () {

    # Match not space
    {
      my $re = Regex->new_with_options("\s+\S+\s+", "a");
      my $target = "\f\tzacz \r\n";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match not space
    {
      my $re = Regex->new_with_options("\S+", "a");
      my $target = "\f\t \r\n";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }
  static method match_space : int () {

    # Match space
    {
      my $re = Regex->new_with_options("a\s+c", "a");
      my $target = "za\f\t\r\n cz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match
    {
      my $re = Regex->new_with_options("\s+", "a");
      my $target = "\aabc\0";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_not_word : int () {

    # Match not number
    {
      my $re = Regex->new_with_options("\w\W+\w", "a");
      my $target = "0-:9";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match not a-z
    {
      my $re = Regex->new_with_options("\w\W+\w", "a");
      my $target = "ab`{yz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match not A-Z
    {
      my $re = Regex->new_with_options("\w\W+\w", "a");
      my $target = "AB`{YZ";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match not _
    {
      my $re = Regex->new_with_options("\w\W+\w", "a");
      my $target = "_^`_";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # not Match 
    {
      my $re = Regex->new_with_options("\W+", "a");
      my $target = "azAZ_09";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_word : int () {

    # Match number
    {
      my $re = Regex->new_with_options("\-\w+\:", "a");
      my $target = "-0123456789:";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match a-z
    {
      my $re = Regex->new_with_options("\`\w+\{", "a");
      my $target = "`abyz{";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match A-Z
    {
      my $re = Regex->new_with_options("\`\w+\{", "a");
      my $target = "`ABYZ{";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match _
    {
      my $re = Regex->new_with_options("\^\w+\`", "a");
      my $target = "^__`";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    # Match Not
    {
      my $re = Regex->new_with_options("\w+", "a");
      my $target = "{}あいう";
      
      my $match = $re->match($target, 0);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_not_number : int () {

    # Match not number
    {
      my $re = Regex->new_with_options("0\D+9", "a");
      my $target = "0abc9";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_number : int () {

    # Match number
    {
      my $re = Regex->new_with_options("a\d+c", "a");
      my $target = "za0123456789cz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match number and not number
    {
      {
        my $re = Regex->new_with_options("\d+\D+\d+", "a");
        my $target = "123abc789";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method invalid_regex : int () {
    # Invalid - Charset after variable quantifier is duplicate
    {
      eval { Regex->new("a*a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("a?a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("a+a"); };
      unless ($@) {
        return 0;
      }
      
      eval { Regex->new("a{1,3}a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new_with_options("\d+\D*\d+", "a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new_with_options("\d+\D?\d+", "a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new(".*."); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new(".*a"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\d"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\D"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\w"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\W"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\s"); };
      unless ($@) {
        return 0;
      }

      eval { Regex->new("\S"); };
      unless ($@) {
        return 0;
      }

      $@ = undef;
    }

    # Valid - aa
    {
       Regex->new("aa");
       Regex->new("a{3,3}a");
       Regex->new_with_options("\d\D\d", "a");
    }
    
    return 1;
  }

  static method match_end : int () {
    # Match $
    {
      # Match $ - "zabbc"
      {
        my $re = Regex->new("ab+c$");
        my $target = "zabbc";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match $ - "zabbcz"
      {
        my $re = Regex->new("ab+c$");
        my $target = "zabbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_start : int () {
    # Match ^
    {
      # Match ^ - "abbcz"
      {
        my $re = Regex->new("^ab+c");
        my $target = "abbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Not Match ^ - "zabbcz"
      {
        my $re = Regex->new("^ab+c");
        my $target = "zabbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method match_quantifier : int () {
    # Match {1,3}
    {
      # Match {1,3} - "zabcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Match {1,3} - "zabbbcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabbbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match {1,3} - "zacz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zacz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
      # Not Match {1,3} - "zabbbbcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabbbbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }

    # Match {11,13}
    {
      # Match {11,13} - "zabbbbbbbbbbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Match {11,13} - "zabbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbbbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match {11,13} - "zacz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
      # Not Match {11,13} - "zabbbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbbbbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_one_or_zero : int () {
    # Match ?
    {
      # Match ? - "zabcz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zabcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match ? - "zabbcz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zabbcz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }

      # Match ? - "zacz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zacz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method match_one_more : int () {
    # Match +
    {
      # Match + - "zabcz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zabcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Match + - "zabbcz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zabbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match + - "zacz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zacz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_zero_more : int () {
    # Match *
    {
      # Match * - "zabcz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Match * - "zabbcz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabbcz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Match * - "zacz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zacz";
        
        my $match = $re->match($target, 0);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match * - "zabbdz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabbdz";
        
        my $match = $re->match($target, 0);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_offset : int () {

    # Not Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = $re->match($target, 2);
      
      if ($match) {
        return 0;
      }
    }
    
    # Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = $re->match($target, 1);
      
      unless ($match) {
        return 0;
      }
    }

    return 1;
  }

  static method match : int () {

    # Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match same string
    {
      my $re = Regex->new("abc");
      my $target = "abc";
      
      my $match = $re->match($target, 0);
      
      unless ($match) {
        return 0;
      }
    }

    return 1;
  }
  
  static method extra : int () {
    
    # Capture syntax suger
    {
      my $re = Regex->new("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)");
      
      $re->match("12345678910", 0);
      
      unless ($re->cap1 eq "1") {
        return 0;
      }
      unless ($re->cap2 eq "2") {
        return 0;
      }
      unless ($re->cap3 eq "3") {
        return 0;
      }
      unless ($re->cap4 eq "4") {
        return 0;
      }
      unless ($re->cap5 eq "5") {
        return 0;
      }
      unless ($re->cap6 eq "6") {
        return 0;
      }
      unless ($re->cap7 eq "7") {
        return 0;
      }
      unless ($re->cap8 eq "8") {
        return 0;
      }
      unless ($re->cap9 eq "9") {
        return 0;
      }
      unless ($re->cap10 eq "10") {
        return 0;
      }
    }
    
    {
      my $result = Fn->replace("xyzAAAxyzAAA", "A+", "BBB");
      unless ($result eq "xyzBBBxyzAAA") {
        return 0;
      }
    }
    
    {
      # "xyzBBBxyzBBB"
      my $result = Fn->replace("xyzAAAxyzAAA", "A+", "BBB", "g");
      unless ($result eq "xyzBBBxyzBBB") {
        return 0;
      }
    }
    
    {
      # "xyzaaaxyzAAA"
      my $result = Fn->replace("xyzAAAxyzAAA", "(A+)", method : string ($re : Regex) { return Fn->lc($re->captures->[0]); });
      unless ($result eq "xyzaaaxyzAAA") {
        return 0;
      }
    }
    
    {
      # "xyzaaaxyzaaa"
      my $result = Fn->replace("xyzAAAxyzAAA", "(A+)", method : string ($re : Regex) { return Fn->lc($re->captures->[0]); }, "g");
      unless ($result eq "xyzaaaxyzaaa") {
        return 0;
      }
    }
    
    return 1;
  }
}
