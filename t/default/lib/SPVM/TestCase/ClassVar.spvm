class TestCase::ClassVar {
  use TestCase::Minimal;
  use TestCase::Simple;
  use Fn;
  
  our $lower_var : int;
  our $CLASS_VAR_INT : int;
  our $CLASS_VAR_LONG : long;
  our $CLASS_VAR_MINIMAL : TestCase::Minimal;

  our $CLASS_VAR_INT2 : int;
  our $CLASS_VAR_LONG2 : long;
  our $CLASS_VAR_MINIMAL2 : TestCase::Minimal;

  our $ACCESSOR : rw int;

  static method var_brace : int () {
    
    $lower_var = 1;
    
    unless ($lower_var == 1) {
      return 0;
    }

    return 1;
  }

  static method class_var : int () {
    if ($TestCase::ClassVar::CLASS_VAR_INT == 0) {
      $TestCase::ClassVar::CLASS_VAR_INT = Fn->INT32_MAX();
      if ($TestCase::ClassVar::CLASS_VAR_INT == Fn->INT32_MAX()) {
        $TestCase::ClassVar::CLASS_VAR_LONG = Fn->INT64_MAX();
        if ($TestCase::ClassVar::CLASS_VAR_LONG == Fn->INT64_MAX()) {
          $TestCase::ClassVar::CLASS_VAR_MINIMAL = TestCase::Minimal->new();
          
          $TestCase::ClassVar::CLASS_VAR_MINIMAL->set_x(4);
          
          if ($TestCase::ClassVar::CLASS_VAR_MINIMAL->set_x(4)) {
            $TestCase::ClassVar::CLASS_VAR_MINIMAL = undef;
            return 1;
          }
        }
      }
    }
    return 0;
  }

  static method class_var_name : int () {
    $CLASS_VAR_INT = 2;
    
    if ($CLASS_VAR_INT == 2) {
      if ($TestCase::ClassVar::CLASS_VAR_INT == 2) {
        $CLASS_VAR_INT = 0;
        return 1;
      }
    }
    
    return 0;
  }

  static method class_var_other_class : int () {
    
    
    unless ($TestCase::Simple::FOO == 0) {
      return 0;
    }

    $TestCase::Simple::FOO = 1;
    unless ($TestCase::Simple::FOO == 1) {
      return 0;
    }
    
    return 1;
  }

  static method accessor : int () {
    
    TestCase::ClassVar->SET_ACCESSOR(3);
    unless ($TestCase::ClassVar::ACCESSOR == 3) {
      return 0;
    }
    
    unless (TestCase::ClassVar->ACCESSOR == 3) {
      return 0;
    }
    
    return 1;
  }

}
