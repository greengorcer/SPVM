class TestCase::Object {
  use TestCase::Minimal;
  use TestCase::Simple;
  
  use TestCase::Destructor;
  use Fn;
  
  has INT32_MAX : int;
  has next : int;
  
  static method get_field_chain : int () {
    my $simple = TestCase::Simple->new;
    my $minimal = TestCase::Minimal->new;
    $minimal->set_x(5);
    $simple->set_minimal($minimal);
    
    my $x = $simple->minimal->x;
    
    unless ($x == 5) {
      return 0;
    }
    
    return 1;
  }
  static method core_func_name_field_name : int () {
    my $self = new TestCase::Object;
    $self->{INT32_MAX} = 1;
    
    unless ($self->{INT32_MAX} == 1) {
      return 0;
    }
    
    return 1;
  }

  static method reserved_word_field_name : int () {
    my $self = new TestCase::Object;
    $self->{next} = 1;
    
    unless ($self->{next} == 1) {
      return 0;
    }
    
    return 1;
  }
  
  static method FLOAT_PRECICE : float () { return 16384.5f; }
  static method DOUBLE_PRECICE : double () { return 65536.5; }

  static method isa_basic : int () {
    my $minimal = TestCase::Minimal->new;
    if ($minimal isa TestCase::Minimal) {
      if (!($minimal isa TestCase)) {
        return 1;
      }
    }
    
    return 0;
  }

  static method destructor : int () {
    my $minimal = TestCase::Minimal->new();
    destructor_call($minimal);
    
    if ($minimal->{x} == 3) {
      return 1;
    }
    return 0;
  }
  
  static method destructor_call : int ($minimal: TestCase::Minimal) {
    my $dest = TestCase::Destructor->new();
    $dest->{minimal} = $minimal;
  }
  
  # object field is initialized zero
  static method object_field_initialized_zero : int () {
    my $obj =TestCase->new;
    if ($obj->{x_byte} == 0) {
      if ($obj->{x_int} == 0) {
        if ($obj->{x_byte_array} == undef) {
          return 1;
        }
      }
    }
    return 0;
  }

  # object field set and get
  static method object_field_set_and_get : int () {
    my $test_case =TestCase->new;
    
    $test_case->{x_byte} = INT8_MAX();
    $test_case->{x_short} = INT16_MAX();
    $test_case->{x_int} = INT32_MAX();
    $test_case->{x_long} = INT64_MAX();
    $test_case->{x_float} = TestCase->FLOAT_PRECICE();
    $test_case->{x_double} = TestCase->DOUBLE_PRECICE();
    my $minimal = TestCase::Minimal->new();
    $minimal->{x} = 3;
    $test_case->{minimal} = $minimal;
    
    if ((int)$test_case->{x_byte} == (int)INT8_MAX()) {
      if ((int)$test_case->{x_short} == (int)INT16_MAX()) {
        if ($test_case->{x_int} == INT32_MAX()) {
          if ($test_case->{x_long} == INT64_MAX()) {
            if ($test_case->{x_float} == TestCase->FLOAT_PRECICE()) {
              if ($test_case->{x_double} == TestCase->DOUBLE_PRECICE()) {
                if ($test_case->{minimal}->{x} == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }

  # object field set and get
  static method object_field_set_and_get_again : int () {
    my $test_case =TestCase->new;
    
    $test_case->{x_byte} = INT8_MAX();
    $test_case->{x_short} = INT16_MAX();
    $test_case->{x_int} = INT32_MAX();
    $test_case->{x_long} = INT64_MAX();
    $test_case->{x_float} = FLOAT_PRECICE();
    $test_case->{x_double} = DOUBLE_PRECICE();
    my $minimal = TestCase::Minimal->new();
    $minimal->{x} = 3;
    $test_case->{minimal} = $minimal;

    $test_case->{x_byte} = INT8_MAX();
    $test_case->{x_short} = INT16_MAX();
    $test_case->{x_int} = INT32_MAX();
    $test_case->{x_long} = INT64_MAX();
    $test_case->{x_float} = FLOAT_PRECICE();
    $test_case->{x_double} = DOUBLE_PRECICE();
    $test_case->{minimal} = $minimal;

    if ((int)$test_case->{x_byte} == (int)INT8_MAX()) {
      if ((int)$test_case->{x_short} == (int)INT16_MAX()) {
        if ($test_case->{x_int} == INT32_MAX()) {
          if ($test_case->{x_long} == INT64_MAX()) {
            if ($test_case->{x_float} == FLOAT_PRECICE()) {
              if ($test_case->{x_double} == DOUBLE_PRECICE()) {
                if ($test_case->{minimal}->{x} == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
}
