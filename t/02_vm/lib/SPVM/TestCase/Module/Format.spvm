class TestCase::Module::Format {
  use Format;
  use TestCase::Minimal;
  use Point;
  
  static method sprintf_X : int () {
    
    unless (Format->sprintf("%X", 0) eq "0") {
      return 0;
    }
    
    unless (Format->sprintf("%X", 255) eq "FF") {
      return 0;
    }
    unless (Format->sprintf("%X", -1) eq "FFFFFFFF") {
      return 0;
    }
    unless (Format->sprintf("%X", 10) eq "A") {
      return 0;
    }
    unless (Format->sprintf("%X", 11) eq "B") {
      return 0;
    }
    unless (Format->sprintf("%X", 12) eq "C") {
      return 0;
    }
    unless (Format->sprintf("%X", 13) eq "D") {
      return 0;
    }
    unless (Format->sprintf("%X", 14) eq "E") {
      return 0;
    }
    unless (Format->sprintf("%X", 15) eq "F") {
      return 0;
    }
    unless (Format->sprintf("%08X", 255) eq "000000FF") {
      return 0;
    }
    
    # Ignore "+"
    unless (Format->sprintf("%+08X", 255) eq "000000FF") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Format->sprintf("%-08X", 255) eq "FF      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Format->sprintf("%X", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }
  
  static method sprintf_basic : int () {
    {
      my $result = Format->sprintf("Foo %d %s %.3f Bar", 123, "abc", 1.115);
      unless ($result eq "Foo 123 abc 1.115 Bar") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method sprintf_c : int () {
    unless (Format->sprintf("%c", 'x') eq "x") { return 0; }
    unless (Format->sprintf("%05c", 'x') eq "0000x") { return 0; }
    unless (Format->sprintf("%-5c", 'x') eq "x    ") { return 0; }
    unless (Format->sprintf("%+c", 'x') eq "x") { return 0; }
    
    # UTF-8
    {
      unless (Format->sprintf("%c", Fn->ord("あ")) eq "あ") { return 0; }
      
      unless (Format->sprintf("%05c", Fn->ord("あ")) eq "00あ") { return 0; }
      unless (Format->sprintf("%-5c", Fn->ord("あ")) eq "あ  ") { return 0; }
      unless (Format->sprintf("%+c", Fn->ord("あ")) eq "あ") { return 0; }
    }
    
    # Invalid UTF-8
    unless (Format->sprintf("%c", 0xD800) eq "?") { return 0; }
    {
      eval {
        Format->sprintf("%c", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_d : int () {
    unless (Format->sprintf("%d", 123) eq "123") {
      return 0;
    }
    
    unless (Format->sprintf("%d", 123) eq "123") {
      return 0;
    }
    unless (Format->sprintf("%5d", 123) eq "  123") {
      return 0;
    }
    unless (Format->sprintf("%05d", 123) eq "00123") {
      return 0;
    }
    unless (Format->sprintf("%+5d", 123) eq " +123") {
      return 0;
    }
    unless (Format->sprintf("%-5d", 123) eq "123  ") {
      return 0;
    }
    unless (Format->sprintf("%-05d", 123) eq "123  ") {
      return 0;
    }
    unless (Format->sprintf("%d", -123) eq "-123") {
      return 0;
    }
    unless (Format->sprintf("%+5d", -123) eq " -123") {
      return 0;
    }
    unless (Format->sprintf("%d", -2147483648) eq "-2147483648") {
      return 0;
    }
    unless (Format->sprintf("%3d", -2147483648) eq "-2147483648") {
      return 0;
    }
    
    
    # Invalid type
    {
      eval {
        Format->sprintf("%d", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }
  
  static method sprintf_exception : int () {
    {
      # Invalid conversion (end of string)
      eval {
        Format->sprintf("%d%", 1);
      };
      unless ($@ && Fn->index($@, "Invalid conversion in sprintf: end of string", 0) > -1) {
        warn("got error: $@");
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (unknown specifier)
      eval {
        Format->sprintf("%d%k", 1, 2);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      # Invalid conversion (no type)
      eval {
        Format->sprintf("%012.3", 3.14);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      # Missing argument
      eval {
        Format->sprintf("%d%d", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      my $string = "abc\n";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "abc";
      my $ret = Fn->chompr($string);
      unless ($ret eq "abc") {
        return 0;
      }
    }
    {
      my $string = "";
      my $ret = Fn->chompr($string);
      unless ($ret eq "") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method sprintf_extra : int () {
    unless (Format->sprintf("%d%%",    1) eq "1%") { return 0; }
    unless (Format->sprintf("%%%d",    1) eq "%1") { return 0; }
    unless (Format->sprintf("%d%%str", 1) eq "1%str") { return 0; }
    return 1;
  }
  
  static method sprintf_f : int () {
    unless (Format->sprintf("%f", 3.1415) eq "3.141500") { return 0; }
    unless (Format->sprintf("%.2f", 3.1415) eq "3.14") { return 0; }
    unless (Format->sprintf("%.10f", 3.14) eq "3.1400000000") { return 0; }
    unless (Format->sprintf("%012.6f", 3.14) eq "00003.140000") { return 0; }
    unless (Format->sprintf("%+12.6f", 3.14) eq "   +3.140000") { return 0; }
    unless (Format->sprintf("%-12.6f", 3.14) eq "3.140000    ") { return 0; }
    unless (Format->sprintf("%+-12.6f", 3.14) eq "+3.140000   ") { return 0; }
    unless (Format->sprintf("%.300f", 1.0) eq ("1." . Fn->repeat("0", 300))) { return 0; }
    unless (Format->sprintf("%10.300f", 1.0) eq ("1." . Fn->repeat("0", 300))) { return 0; }
    
    # Float
    {
      unless (Format->sprintf("%.2f", 3.1415f) eq "3.14") { return 0; }
    }
    
    {
      eval {
        Format->sprintf("%f", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_g : int () {
    unless (Format->sprintf("%g", 3.14) eq "3.14") { return 0; }
    unless (Format->sprintf("%.2g", 3.14) eq "3.1") { return 0; }
    unless (Format->sprintf("%-+10.2g", 3.14) eq "+3.1      ") { return 0; }
    
    unless (Format->sprintf("%g", 3.14f) eq "3.14") { return 0; }
    
    {
      eval {
        Format->sprintf("%g", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_lX : int () {
    
    unless (Format->sprintf("%lX", 0L) eq "0") {
      return 0;
    }
    unless (Format->sprintf("%lX", 255L) eq "FF") {
      return 0;
    }
    unless (Format->sprintf("%lX", -1L) eq "FFFFFFFFFFFFFFFF") {
      return 0;
    }
    unless (Format->sprintf("%08lX", 255L) eq "000000FF") {
      return 0;
    }
    
    # Ignore "+"
    unless (Format->sprintf("%+08lX", 255L) eq "000000FF") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Format->sprintf("%-08lX", 255L) eq "FF      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Format->sprintf("%lX", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }
  
  static method sprintf_ld : int () {
    unless (Format->sprintf("%ld", 10000000000L) eq "10000000000") { return 0; }
    unless (Format->sprintf("%013ld", 12345678901L) eq "0012345678901") { return 0; }
    unless (Format->sprintf("%+13ld", 12345678901L) eq " +12345678901") { return 0; }
    unless (Format->sprintf("%-13ld", 12345678901L) eq "12345678901  ") { return 0; }
    unless (Format->sprintf("%ld", -9223372036854775808L) eq "-9223372036854775808") {
      return 0;
    }
    unless (Format->sprintf("%3ld", -9223372036854775808L) eq "-9223372036854775808") {
      return 0;
    }
    {
      eval {
        Format->sprintf("%ld", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Format->sprintf("%l", 1L);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_lu : int () {
    unless (Format->sprintf("%lu", 10000000000L) eq "10000000000") { return 0; }
    unless (Format->sprintf("%013lu", 12345678901L) eq "0012345678901") { return 0; }
    unless (Format->sprintf("%+13lu", 12345678901L) eq "  12345678901") { return 0; }
    unless (Format->sprintf("%-13lu", 12345678901L) eq "12345678901  ") { return 0; }
    unless (Format->sprintf("%lu", -1L) eq "18446744073709551615") { return 0; }
    {
      eval {
        Format->sprintf("%ld", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    {
      eval {
        Format->sprintf("%l", 1L);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_lx : int () {
    
    unless (Format->sprintf("%lx", 0L) eq "0") {
      return 0;
    }
    unless (Format->sprintf("%lx", 255L) eq "ff") {
      return 0;
    }
    unless (Format->sprintf("%lx", -1L) eq "ffffffffffffffff") {
      return 0;
    }
    unless (Format->sprintf("%08lx", 255L) eq "000000ff") {
      return 0;
    }
    
    # Ignore "+"
    unless (Format->sprintf("%+08lx", 255L) eq "000000ff") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Format->sprintf("%-08lx", 255L) eq "ff      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Format->sprintf("%lx", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }
  
  static method sprintf_p_value : string () {
    my $string = "abc";
    
    my $formatted_string = Format->sprintf("%p", $string);
    
    return $formatted_string;
  }
  static method sprintf_s : int () {
    unless (Format->sprintf("%s", "ABC") eq "ABC") { return 0; }
    unless (Format->sprintf("%05s", "str") eq "00str") { return 0; }
    unless (Format->sprintf("%-5s", "str") eq "str  ") { return 0; }
    unless (Format->sprintf("%+s", "str") eq "str") { return 0; }
    {
      eval {
        Format->sprintf("%s", 1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_u : int () {
    unless (Format->sprintf("%u", 123) eq "123") { return 0; }
    unless (Format->sprintf("%05u", 123) eq "00123") { return 0; }
    unless (Format->sprintf("%+5u", 123) eq "  123") { return 0; }
    unless (Format->sprintf("%-5u", 123) eq "123  ") { return 0; }
    unless (Format->sprintf("%u", -1) eq "4294967295") { return 0; }

    {
      eval {
        Format->sprintf("%d", "str");
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }
  
  static method sprintf_x : int () {
    
    unless (Format->sprintf("%x", 0) eq "0") {
      return 0;
    }
    unless (Format->sprintf("%x", 255) eq "ff") {
      return 0;
    }
    unless (Format->sprintf("%x", -1) eq "ffffffff") {
      return 0;
    }
    unless (Format->sprintf("%08x", 255) eq "000000ff") {
      return 0;
    }
    
    # Ignore "+"
    unless (Format->sprintf("%+08x", 255) eq "000000ff") {
      return 0;
    }
    
    # "-" ignores "0" padding
    unless (Format->sprintf("%-08x", 255) eq "ff      ") {
      return 0;
    }
    
    # Invalid type
    {
      eval {
        Format->sprintf("%x", (byte)1);
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  static method sprintf_p : int () {
    {
      my $point = Point->new;
      my $formatted = Format->sprintf("%p", $point);
      
      warn "[Test Output]$formatted";
      
      unless ($formatted->[0] == '0') {
        return 0;
      }
      unless ($formatted->[1] == 'x') {
        return 0;
      }
      unless (Fn->is_hex_digit($formatted->[2])) {
        return 0;
      }
      unless (Fn->is_hex_digit($formatted->[3])) {
        return 0;
      }
      unless (Fn->is_hex_digit($formatted->[4])) {
        return 0;
      }
      unless (Fn->is_hex_digit($formatted->[5])) {
        return 0;
      }
    }
    return 1;
  }
}
