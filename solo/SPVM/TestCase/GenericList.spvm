package TestCase::GenericList<T> {
  has values : oarray;
  has length : int;
  has capacity : int;

  sub new : TestCase::List ($capacity : int) {
    my $self = new TestCase::List;
    
    $self->{capacity} = $capacity;
    
    $self->{values} = new object[$capacity];
    
    return $self;
  }
  
  sub add : void ($self : self, $object : T) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    if ($length >= $capacity) {
      my $new_capacity = $capacity * 2;
      $self->{values} = new object[$new_capacity];
      $self->{capacity} = $new_capacity;
    }
    
    $self->{values}[$length] = $object;
    
    $self->{length} = $self->{length} + 1;
  }
  
  sub get_values : T[] ($self : self) {
    my $values : T[];
    for (my $i = 0; $i < $self->length; $i++) {
      $values->[$i] = $self->values->[$i];
    }
    
    return $values;
  }
  
  
  sub get : T ($self : self, $index : int) {
    return $self->{values}[$index];
  }
}
