#!perl

use strict;
use warnings;

use SPVM();
use SPVM::Builder::Exe;
use SPVM::Builder::Util;

SPVM::Builder::Util::getopt
  'h|help'          => \my $help,
  'v|version'       => \my $show_version,
  'o|output=s'        => \my $output_file,
  'B|build-dir=s'   => \my $build_dir,
  'I|module-dir=s' => \my @module_dirs,
  'q|quiet'   => \my $quiet,
  'O|optimize=s' => \my $optimize,
  '-f|force' => \my $force,
;

if ($help) {
  die SPVM::Builder::Util::extract_usage;
}
elsif ($show_version) {
  my $version_string = 'spvmcc v$SPVM::VERSION';
  print "$version_string\n";
}
else {
  my $class_name = shift;
  unless (defined $class_name) {
    die SPVM::Builder::Util::extract_usage;
  }
  
  push @module_dirs, @INC;
  
  my @spvm_module_dirs = map { "$_/SPVM" } @module_dirs;
  
  my $build_exe = SPVM::Builder::Exe->new(
    module_dirs => \@spvm_module_dirs,
    output_file => $output_file,
    class_name => $class_name,
    quiet => $quiet,
    optimize => $optimize,
    force => $force,
  );
  $build_exe->build_exe_file;
}


=encoding utf8

=head1 NAME

spvmcc - SPVM compiler to create exe file

=head1 SYNOPSIS

  Usage: spvmcc [OPTIONS] [MODULE_NAME]
    
    # lib/SPVM/Myapp.spvm
    spvmcc -I lib -o myapp Myapp

  Options:
    -h, --help                     Show this message
    -v, --version                  Show the version
    -o, --output                   Excutable file name
    -I, --module-dir <directory>   Add SPVM module searching directory
    -B, --build-dir <directory>    Building diretory
    -q, --quiet                    Quiet output
    -O, --optimize <level>         Optimaization level
    -f, --force                    Force compile and link
    
=head1 DESCRIPTION

spvmcc is SPVM compiler to create executable file.
