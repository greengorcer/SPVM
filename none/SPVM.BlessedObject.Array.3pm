.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::BlessedObject::Array 3"
.TH SPVM::BlessedObject::Array 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::BlessedObject::Array \- Array based blessed object
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
SPVM::BlessedObject::Array is array based blessed object.
.PP
This object contains \s-1SPVM\s0 array object.
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&  # Get the value of a array element
\&  my $value = $spvm_nums\->get(2);
\&
\&  # Set the value of a array element
\&  $spvm_nums\->set(2 => 5);
\&  
\&  # Convert SPVM array to Perl array reference
\&  my $nums = $spvm_nums\->to_elems;
\&
\&  # Convert SPVM array to Perl binary data
\&  my $binary = $spvm_nums\->to_bin;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "get"
.IX Subsection "get"
.Vb 1
\&  my $value = $spvm_nums\->get(2);
.Ve
.PP
Get the value of a array element.
.SS "set"
.IX Subsection "set"
.Vb 1
\&  $spvm_nums\->set(2 => 5);
.Ve
.PP
Set the value of a array element
.SS "to_elems"
.IX Subsection "to_elems"
.Vb 1
\&  my $nums = $spvm_nums\->to_elems;
.Ve
.PP
Convert \s-1SPVM\s0 array to Perl array reference.
.SS "to_bin"
.IX Subsection "to_bin"
.Vb 1
\&  my $binary = $spvm_nums\->to_bin;
.Ve
.PP
Convert \s-1SPVM\s0 array to binary data.
.PP
Binary data is unpacked by \f(CW\*(C`unpack\*(C'\fR function.
.PP
An exmaple when array is int array:
.PP
.Vb 1
\&  my @nums = unpack \*(Aql*\*(Aq, $binary;
.Ve
.SH "OPERATORS"
.IX Header "OPERATORS"
SPVM::BlessedObject::Array overloads the following operators.
.SS "array dereference"
.IX Subsection "array dereference"
Array dereference get the elements of the array.
.PP
.Vb 2
\&  # Get elements
\&  my @elements = @$array;
.Ve
.PP
This is the same as the following.
.PP
.Vb 1
\&  my @elements = @{$array\->to_elems};
.Ve
