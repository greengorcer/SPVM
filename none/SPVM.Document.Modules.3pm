.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Document::Modules 3"
.TH SPVM::Document::Modules 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Document::Modules \- SPVM Standard Modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The list of \s-1SPVM\s0 Standard Modules.
.SH "STANDARD MODULES"
.IX Header "STANDARD MODULES"
.IP "\(bu" 2
Fn \- Standard Functions
.IP "\(bu" 2
Byte \- byte Object
.IP "\(bu" 2
ByteList \- Dynamic byte Array
.IP "\(bu" 2
Cloner \- a Callback Interface to Clone a Object
.IP "\(bu" 2
Comparator::Byte \- a Callback Interface for byte Comparation
.IP "\(bu" 2
Comparator::Short \- a Callback Interface for short Comparation
.IP "\(bu" 2
Comparator::Int \- a Callback Interface for int Comparation
.IP "\(bu" 2
Comparator::Long \- a Callback Interface for long Comparation
.IP "\(bu" 2
Comparator::Float \- a Callback Interface for float Comparation
.IP "\(bu" 2
Comparator::Double \- a Callback Interface for double Comparation
.IP "\(bu" 2
Comparator::String \- a Callback Interface for string Comparation
.IP "\(bu" 2
Comparator::Object \- a Callback Interface for object Comparation
.IP "\(bu" 2
Complex_2d \- double Complex Type
.IP "\(bu" 2
Complex_2f \- float Complex Type
.IP "\(bu" 2
Double \- double Object
.IP "\(bu" 2
DoubleList \- Dynamic double Array
.IP "\(bu" 2
EqualityChecker \- the Callback Interface to Check the Object Equality
.IP "\(bu" 2
EqualityChecker::SameObject \- a Callback Implementation of EqualityChecker to Check if the Memory Addresses of the Two Objects are Equal.
.IP "\(bu" 2
Float \- float Object
.IP "\(bu" 2
FloatList \- Dynamic float Array
.IP "\(bu" 2
Hash \- Hash Data Structure
.IP "\(bu" 2
Hash::Entry \- Hash Entry
.IP "\(bu" 2
Int \- int Object
.IP "\(bu" 2
IntList \- Dynamic int Array
.IP "\(bu" 2
List \- Dynamic Object Array
.IP "\(bu" 2
Long \- long Object
.IP "\(bu" 2
LongList \- Dynamic long Array
.IP "\(bu" 2
Regex \- Regular Expression
.IP "\(bu" 2
Regex::Pattern \- Regular Expression Pattern
.IP "\(bu" 2
Regex::Replacer \- Regular Expression Replacer
.IP "\(bu" 2
Short \- short Object
.IP "\(bu" 2
ShortList \- Dynamic short Array
.IP "\(bu" 2
StringBuffer \- String Buffer
.IP "\(bu" 2
Stringer \- the Callback interface to stringify object
.IP "\(bu" 2
StringList \- Dynamic string Array
.IP "\(bu" 2
Time \- Time Manipulation
.IP "\(bu" 2
Time::Info \- Time Information
.IP "\(bu" 2
Unicode \- Unicode Utilities
.SH "CPAN MODULES"
.IX Header "CPAN MODULES"
The list of some \s-1CPAN\s0 modules.
.IP "\(bu" 2
Math \- Math functions
