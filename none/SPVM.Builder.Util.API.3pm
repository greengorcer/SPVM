.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Builder::Util::API 3"
.TH SPVM::Builder::Util::API 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Builder::Util::API \- Public APIs of the utility of SPVM Builder
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 3
\&  # Create native make rule
\&  my $native_make_rule
\&    = SPVM::Builder::Util::API::create_make_rule_native(\*(AqFoo\*(Aq);
\&  
\&  # Create precompile make rule
\&  my $precompile_make_rule
\&    = SPVM::Builder::Util::API::create_make_rule_precompile(\*(AqFoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSPVM::Builder::Util::API\fR is the public APIs of the utilities of \s-1SPVM\s0 Builder.
.PP
SPVM::Builder::Util is a private modules of \s-1SPVM\s0.
.PP
The names and arguments of the functions are changed without warnings in the future release.
.PP
However, the functions is useful to create the content of Makefile.
.PP
\&\fBSPVM::Builder::Util::API\fR provides the public APIs to call the functions of SPVM::Builder::Util. These APIs is public and stable.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "create_make_rule_native"
.IX Subsection "create_make_rule_native"
Create native compile make rule.
.PP
This is used in Makefile.PL of your distributed module.
.PP
.Vb 2
\&  # Makefile.PL
\&  sub MY::postamble {
\&
\&    my $make_rule = \*(Aq\*(Aq;
\&    
\&    # Native compile make rule
\&    $make_rule .= SPVM::Builder::Util::API::create_make_rule_native(\*(AqFoo\*(Aq);
\&    
\&    return $make_rule;
\&  }
.Ve
.SS "create_make_rule_precompile"
.IX Subsection "create_make_rule_precompile"
Create precompile make rule.
.PP
This is used in Makefile.PL of your distributed module.
.PP
.Vb 1
\&  sub MY::postamble {
\&
\&    my $make_rule = \*(Aq\*(Aq;
\&    
\&    # Precompile make rule
\&    $make_rule .= SPVM::Builder::Util::API::create_make_rule_precompile(\*(AqFoo\*(Aq);
\&    
\&    return $make_rule;
\&  }
.Ve
