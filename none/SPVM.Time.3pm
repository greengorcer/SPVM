.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Time 3"
.TH SPVM::Time 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Time \- Time in SPVM | Time manipulation
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  use Time;
\&  
\&  # Get Current Epoch time
\&  my $time = Time\->time;
\&  
\&  # Get Local time information
\&  my $time_info = Time\->localtime(Time\->time);
\&  
\&  # Get GMT time information
\&  my $time_info = Time\->gmtime(Time\->time);
\&  
\&  # Convert Time::Info to which is local time zone to calender time as same as time method format.
\&  my $time = Time\->timelocal($time_info);
\&  
\&  # Convert Time::Info which is the standard Greenwich time zone to calender time as same as time method format.
\&  my $time = Time\->timegm($time_info);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Time manipulation.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "time"
.IX Subsection "time"
.Vb 1
\&  static method time : long ();
.Ve
.PP
Returns the number of non-leap seconds since whatever time the system considers
to be the epoch, suitable for feeding to \*(L"gmtime\*(R" and \*(L"localtime\*(R".
On most systems the epoch is 00:00:00 \s-1UTC,\s0 January 1, 1970;
.PP
Example:
.PP
.Vb 1
\&  my $time = Time\->time;
.Ve
.SS "localtime"
.IX Subsection "localtime"
.Vb 1
\&  static method localtime : Time::Info ($time : long)
.Ve
.PP
Converts a time as returned by the time method to a Time::Info object
with the time analyzed for the local time zone.
.PP
Example:
.PP
.Vb 1
\&  my $time_info = Time\->localtime(Time\->time);
.Ve
.PP
\&\*(L"mday\*(R" is the day of the month and \*(L"mon\*(R" the month in the range
0..11, with 0 indicating January and 11 indicating December.
.PP
\&\*(L"year\*(R" contains the number of years since 1900. To get a 4\-digit
year write:
.PP
.Vb 1
\&    my $year = $time_info\->year + 1900;
.Ve
.PP
\&\*(L"wday\*(R" is the day of the week, with 0 indicating Sunday and 3
indicating Wednesday. \*(L"yday\*(R" is the day of the year, in the range
0..364 (or 0..365 in leap years.)
.PP
\&\*(L"isdst\*(R" is true if the specified time occurs during Daylight Saving
Time, false otherwise.
.PP
If you get current time information, pass return value of \*(L"time\*(R" method.
.PP
.Vb 1
\&  my $time_info = Time\->localtime(Time\->time)
.Ve
.PP
See also the \*(L"timelocal\*(R" method. (for converting seconds,
minutes, hours, and such back to the integer value returned by
\&\fBtime()\fR).
.SS "gmtime"
.IX Subsection "gmtime"
.Vb 1
\&  static method gmtime : Time::Info ($time : long)
.Ve
.PP
Works just like \*(L"localtime\*(R" but the returned values are localized
for the standard Greenwich time zone.
.PP
See also the \*(L"timegm\*(R" method. (for converting seconds,
minutes, hours, and such back to the integer value returned by
\&\fBtime()\fR).
.SS "timelocal"
.IX Subsection "timelocal"
.Vb 1
\&  static method timelocal : long ($time_info : Time::Info)
.Ve
.PP
timelocal method convert Time::Info which is local time zone to calender time as same as time method format.
.PP
wday and yday is ignored.
.PP
.Vb 1
\&  my $time = Time\->timelocal($time_info);
.Ve
.SS "timegm"
.IX Subsection "timegm"
.Vb 1
\&  static method timegm : long ($time_info : Time::Info)
.Ve
.PP
timegm method convert Time::Info which is the standard Greenwich time zone to calender time as same as time method format.
.PP
wday and yday is ignored.
.PP
.Vb 1
\&  my $time = Time\->timegm($time_info);
.Ve
