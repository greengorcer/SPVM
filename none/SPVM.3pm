.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM 3"
.TH SPVM 3 "2022-01-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM \- Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding.
.SH "CAUTHION"
.IX Header "CAUTHION"
\&\fB\s-1SPVM\s0 is not yet 1.0. Please note \s-1SPVM\s0 can change without warnings. There can be a lot of changes until I feel good enough.\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1SPVM\s0 Module:
.PP
.Vb 3
\&  # lib/SPVM/MyMath.spvm
\&  class MyMath {
\&    static method sum : int ($nums : int[]) {
\&
\&      my $total = 0;
\&      for (my $i = 0; $i < @$nums; $i++) {
\&        $total += $nums\->[$i];
\&      }
\&
\&      return $total;
\&    }
\&  }
.Ve
.PP
Call \s-1SPVM\s0 method from Perl:
.PP
.Vb 5
\&  # spvm.pl
\&  use strict;
\&  use warnings;
\&  use FindBin;
\&  use lib "$FindBin::Bin/lib";
\&
\&  use SPVM \*(AqMyMath\*(Aq;
\&
\&  # Call method
\&  my $total = SPVM::MyMath\->sum([3, 6, 8, 9]);
\&
\&  print "Total: $total\en";
\&
\&  # Call method with packed data
\&  my $nums_packed = pack(\*(Aql*\*(Aq, 3, 6, 8, 9);
\&  my $sv_nums = SPVM::new_int_array_from_bin($nums_packed);
\&  my $total_packed = SPVM::MyMath\->sum($sv_nums);
\&
\&  print "Total Packed: $total_packed\en";
.Ve
.PP
Precompiled \s-1SPVM\s0 Method. This code is converted to C language and then converted to a shared library.
.PP
.Vb 3
\&  # lib/SPVM/MyMath.spvm
\&  class MyMath : precompile {
\&    static method sum : int ($nums : int[]) {
\&
\&      my $total = 0;
\&      for (my $i = 0; $i < @$nums; $i++) {
\&        $total += $nums\->[$i];
\&      }
\&
\&      return $total;
\&    }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SPVM\s0 is a Static Perl Virtual Machine. \s-1SPVM\s0 is a programming language which has Perlish syntax. \s-1SPVM\s0 provides fast Calculation & easy C/\*(C+ Binding.
.SH "FEATURES"
.IX Header "FEATURES"
.IP "\(bu" 4
Fast calculation, Fast array operation
.IP "\(bu" 4
Precompile Method, Easy way to C/\*(C+ binding, C99 math functions
.IP "\(bu" 4
Perlish syntax, Static typing, Type inference
.IP "\(bu" 4
Reference count \s-1GC,\s0 Weaken reference, Exception, Module
.IP "\(bu" 4
Object oriented programming
.SH "DOCUMENT"
.IX Header "DOCUMENT"
\&\s-1SPVM\s0 documents.
.SS "Tutorial"
.IX Subsection "Tutorial"
\&\s-1SPVM\s0 Tutorial.
.IP "\(bu" 2
Tutorial
.SS "Language Specification"
.IX Subsection "Language Specification"
\&\s-1SPVM\s0 Language Specification.
.IP "\(bu" 2
Language Specification
.SS "Standard Functions"
.IX Subsection "Standard Functions"
\&\s-1SPVM\s0 Standard Functions
.IP "\(bu" 2
Standard Functions
.SS "Standard Modules"
.IX Subsection "Standard Modules"
\&\s-1SPVM\s0 Standard Modules.
.IP "\(bu" 2
Standard Modules
.SS "Performance Benchmark"
.IX Subsection "Performance Benchmark"
\&\s-1SPVM\s0 Performance Benchmark.
.IP "\(bu" 2
Benchmark
.SS "Exchange \s-1API\s0"
.IX Subsection "Exchange API"
\&\s-1SPVM\s0 Exchange \s-1API\s0 converts Perl data structures to \s-1SPVM\s0 data structures, and vice versa.
.IP "\(bu" 2
ExchangeAPI
.SS "Native \s-1API\s0"
.IX Subsection "Native API"
\&\s-1SPVM\s0 Native \s-1API\s0 is C \s-1API\s0 used in \s-1SPVM\s0 native method.
.IP "\(bu" 2
NativeAPI
.SS "Generate Execution File"
.IX Subsection "Generate Execution File"
\&\fBspvmcc\fR is a compiler to compile \s-1SPVM\s0 source codes to a execution file. The execution file can be run by itself.
.IP "\(bu" 2
spvmcc
.SS "Generate \s-1SPVM\s0 Native Modules"
.IX Subsection "Generate SPVM Native Modules"
\&\fBspvmgenlib\fR is the command to generate \s-1SPVM\s0 native modules.
.IP "\(bu" 2
spvmgenlib
.SH "ENVIRONMENT VARIABLE"
.IX Header "ENVIRONMENT VARIABLE"
.SS "\s-1SPVM_BUILD_DIR\s0"
.IX Subsection "SPVM_BUILD_DIR"
\&\s-1SPVM\s0 build directory for precompile and native method.
.PP
If \s-1SPVM_BUILD_DIR\s0 environment variable is not set, \s-1SPVM\s0 can't compile precompile method and native method, and a exception occur. You see error message \*(L"\s-1SPVM_BUILD_DIR\s0 environment variable must be set ...\*(R".
.PP
In bash, you can set \s-1SPVM_BUILD_DIR\s0 to the following.
.PP
.Vb 1
\&  export SPVM_BUILD_DIR=~/.spvm_build
.Ve
.SS "\s-1SPVM_CC_DEBUG\s0"
.IX Subsection "SPVM_CC_DEBUG"
Print SVPM::Builder::CC compile and link outputs to stderr.
.SS "\s-1SPVM_CC_FORCE\s0"
.IX Subsection "SPVM_CC_FORCE"
Force SVPM::Builder::CC compile and link.
.SH "CAUTION"
.IX Header "CAUTION"
This release is a beta release before \s-1SPVM 1.0.\s0 The features can change without notice. Use at your own risk.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
\&\s-1SPVM\s0 \- Github <https://github.com/yuki-kimoto/SPVM>
.SH "BUG REPORT"
.IX Header "BUG REPORT"
GitHub Issue <https://github.com/yuki-kimoto/SPVM/issues>
.SH "SUPPORT"
.IX Header "SUPPORT"
Github Discussions <https://github.com/yuki-kimoto/SPVM/discussions>
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuki Kimoto <kimoto.yuki@gmail.com>
.SH "CORE DEVELOPERS"
.IX Header "CORE DEVELOPERS"
moti<motohiko.ave@gmail.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Mohammad S Anwar
.IP "\(bu" 2
akinomyoga
.IP "\(bu" 2
\&\s-1NAGAYASU\s0 Shinya
.IP "\(bu" 2
Reini Urban
.IP "\(bu" 2
chromatic
.IP "\(bu" 2
Kazutake Hiramatsu
.IP "\(bu" 2
Yasuaki Omokawa
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2018\-2021 Yuki Kimoto, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
