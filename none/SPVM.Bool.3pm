.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Bool 3"
.TH SPVM::Bool 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Bool \- Bool in SPVM | Bool object
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  use Bool;
\&  
\&  my $true = Bool\->TRUE;
\&  my $false = Bool\->FALSE;
\&  
\&  my $true_value = $true\->value;
\&  my $false_value = $false\->value;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bool object stores a \f(CW\*(C`long\*(C'\fR value.
.PP
This object is immutable and its value cannot be changed.
.PP
Bool is automatically loaded just after the program starts.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "\s-1TRUE\s0"
.IX Subsection "TRUE"
.Vb 1
\&  static method TRUE : Bool ()
.Ve
.PP
true singleton. This is created by \s-1INIT\s0 block when the program start.
.SS "\s-1FALSE\s0"
.IX Subsection "FALSE"
.Vb 1
\&  static method FALSE : Bool ()
.Ve
.PP
false singleton. This is created by \s-1INIT\s0 block when the program start.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "value"
.IX Subsection "value"
.Vb 1
\&  method value : int ()
.Ve
.PP
Return a \f(CW\*(C`int\*(C'\fR value.
.PP
If Bool object express true, this method return \f(CW1\fR.
.PP
If Bool object express false, this method return \f(CW1\fR.
.SH "BOOL CONTEXT"
.IX Header "BOOL CONTEXT"
the object of Bool class is different behavior in bool context.
.PP
If the \f(CW\*(C`value\*(C'\fR of Bool object is 1, it is evaluated as true.
.PP
.Vb 3
\&  if (Bool\->TRUE) {
\&    # Run
\&  }
.Ve
.PP
If the \f(CW\*(C`value\*(C'\fR of Bool object is 0, it is evaluated as false.
.PP
.Vb 3
\&  if (Bool\->FALSE) {
\&    # Not run
\&  }
.Ve
.SH "KEYWORDS"
.IX Header "KEYWORDS"
\&\f(CW\*(C`true\*(C'\fR keyword means Bool\->\s-1TRUE.\s0 \f(CW\*(C`false\*(C'\fR keyword means Bool\->\s-1FALSE.\s0
.PP
.Vb 3
\&  if (true) {
\&    # Run
\&  }
\&
\&  if (false) {
\&    # Not run
\&  }
.Ve
