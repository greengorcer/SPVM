.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Builder::API 3"
.TH SPVM::Builder::API 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Builder::API \- SPVM Builder Public APIs
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 4
\&  # Builder API
\&  my $api = SPVM::Builder::API\->new(
\&    build_dir => \*(Aq.spvm_build\*(Aq,
\&  );
\&  
\&  # Compile SPVM
\&  my $success = $api\->compile_spvm(\*(AqMyLib\*(Aq);
\&  unless ($success) {
\&    # Error message
\&    my $error_messages = $self\->get_error_messages;
\&    for my $error_message (@$error_messages) {
\&      printf STDERR "[CompileError]$error_message\en";
\&    }
\&    exit 255;
\&  }
\&  
\&  # Class names
\&  my $class_names = $api\->get_class_names;
\&  
\&  for my $class_name (@$class_names) {
\&    # Method names
\&    my $method_names = $api\->get_method_names($class_name);
\&    
\&    for my $method_name (@$method_names) {
\&      # Method signature
\&      my $method_signature = $api\->get_method_signature($class_name, $method_name);
\&      
\&      print "$class_name\->$method_name: $method_signature\en";
\&    }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSPVM::Builder::API\fR is the public APIs of \s-1SPVM\s0 Builder.
.PP
SPVM::Builder is a private modules of \s-1SPVM\s0.
.PP
The names and arguments of the methods are changed without warnings in the future release.
.PP
However, the methods is useful to get the information of \s-1SPVM\s0 modules.
.PP
\&\fBSPVM::Builder::API\fR provides the public APIs to call the methods. These APIs is public and stable.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 2
\&  # Builder API
\&  my $api = SPVM::Builder::API\->new;
.Ve
.PP
Create \fBSPVM::Builder::API\fR object.
.PP
\&\fBOptions:\fR
.IP "\(bu" 2
build_dir
.Sp
Build directory.
.SS "compile_spvm"
.IX Subsection "compile_spvm"
.Vb 2
\&  # Compile SPVM
\&  my $success = $api\->compile_spvm(\*(AqMyLib\*(Aq);
.Ve
.PP
Compile \s-1SPVM\s0 module. If succeeded, return true value, otherwise false value.
.SS "get_error_messages"
.IX Subsection "get_error_messages"
.Vb 2
\&  # Error message
\&  my $error_messages = $self\->get_error_messages;
.Ve
.PP
Get error messages of the compililation as array reference.
.SS "get_class_names"
.IX Subsection "get_class_names"
.Vb 2
\&  # Class names
\&  my $class_names = $api\->get_class_names;
.Ve
.PP
Get class names as array reference.
.SS "get_method_names"
.IX Subsection "get_method_names"
.Vb 2
\&  # Method names
\&  my $method_names = $api\->get_method_names($class_name);
.Ve
.PP
Get method names as array reference.
.SS "get_method_signature"
.IX Subsection "get_method_signature"
.Vb 2
\&  # Method signature
\&  my $method_signature = $api\->get_method_signature($class_name, $method_name);
.Ve
.PP
Get the method signature. The first argument is a class name. The second argument is a method name.
.PP
About method signatures, see SPVM::Document::LanguageSpecification.
.SS "build_shared_lib_dist_precompile"
.IX Subsection "build_shared_lib_dist_precompile"
.Vb 1
\&  $api\->build_shared_lib_dist_precompile($class_name)
.Ve
.PP
Build a precompile shared library into \f(CW\*(C`blib/lib\*(C'\fR.
.SS "build_shared_lib_dist_native"
.IX Subsection "build_shared_lib_dist_native"
.Vb 1
\&  $api\->build_shared_lib_dist_native($class_name)
.Ve
.PP
Build a native shared library into \f(CW\*(C`blib/lib\*(C'\fR.
