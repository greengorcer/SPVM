.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Document::Benchmark 3"
.TH SPVM::Document::Benchmark 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Document::Benchmark \- SPVM Performance Benchmark
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SPVM\s0 Performance Benchmark.
.SH "BENCHMARK"
.IX Header "BENCHMARK"
.SS "for loop addition"
.IX Subsection "for loop addition"
for loop addition benchmark.
.PP
\fIBenchmark Result\fR
.IX Subsection "Benchmark Result"
.PP
Benchmark raw output
.PP
.Vb 10
\&  Benchmark: timing 10000 iterations of perl5_28_sum, spvm_sum, spvm_sum, spvm_sum_precompile...
\&  perl5_28_sum: 49 wallclock secs (48.96 usr +  0.02 sys = 48.98 CPU) @ 204.16/s (n=10000)
\&    spvm_sum: 27 wallclock secs (26.75 usr +  0.00 sys = 26.75 CPU) @ 373.83/s (n=10000)
\&  spvm_sum:  0 wallclock secs ( 0.41 usr +  0.00 sys =  0.41 CPU) @ 24390.24/s (n=10000)
\&  spvm_sum_precompile:  1 wallclock secs ( 0.42 usr +  0.00 sys =  0.42 CPU) @ 23809.52/s (n=10000)
\&                         Rate perl5_28_sum spvm_sum spvm_sum_precompile spvm_sum
\&  perl5_28_sum          204/s           \-\-     \-45%                \-99%            \-99%
\&  spvm_sum              374/s          83%       \-\-                \-98%            \-98%
\&  spvm_sum_precompile 23810/s       11562%    6269%                  \-\-             \-2%
\&  spvm_sum     24390/s       11846%    6424%                  2%              \-\-
.Ve
.PP
\fIBenchmark program\fR
.IX Subsection "Benchmark program"
.PP
.Vb 1
\&  B<benchmark\-synopsys.pl>
\&
\&  use strict;
\&  use warnings;
\&  use FindBin;
\&  use lib "$FindBin::Bin/lib";
\&  use Benchmark qw/timethese cmpthese/;
\&
\&  use SPVM \*(AqMyMath\*(Aq;
\&
\&  # Initialize SPVM
\&
\&  use strict;
\&  use warnings;
\&  use FindBin;
\&  use lib "$FindBin::Bin/lib";
\&  use Benchmark qw/timethese cmpthese/;
\&
\&  use SPVM \*(AqMyMath\*(Aq;
\&  use SPVM \*(AqMyMathPrecompile\*(Aq;
\&  use SPVM \*(AqMyMathNative\*(Aq;
\&
\&  my $bench_count = 10000;
\&  my $loop_count = 100000;
\&  my $result = timethese($bench_count, {
\&    perl5_28_sum => sub {
\&      perl_sum($loop_count);
\&    },
\&    spvm_sum => sub {
\&      SPVM::MyMath\->spvm_sum($loop_count);
\&    },
\&    spvm_sum_precompile => sub {
\&      SPVM::MyMathPrecompile\->spvm_sum($loop_count);
\&    },
\&    spvm_sum => sub {
\&      SPVM::MyMathNative\->spvm_sum($loop_count);
\&    },
\&  });
\&
\&  cmpthese $result;
\&
\&  sub perl_sum {
\&    my ($loop_count) = @_;
\&    
\&    my $total = 0;
\&    for (my $i = 0; $i < $loop_count; $i++) {
\&      $total += $i;
\&    }
\&    
\&    return $total;
\&  }
.Ve
.PP
\&\fBSPVM/MyMath.spvm\fR
.PP
.Vb 2
\&  class MyMath {
\&    static method spvm_sum : int ($loop_count : int) {
\&      
\&      my $total = 0;
\&      for (my $i = 0; $i < $loop_count; $i++) {
\&        $total += $i;
\&      }
\&      
\&      return $total;
\&    }
\&  }
.Ve
.PP
\&\fBSPVM/MyMathPrecompile.spvm\fR
.PP
.Vb 2
\&  class MyMathPrecompile : precompile {
\&    static method spvm_sum : int ($loop_count : int) {
\&      
\&      my $total = 0;
\&      for (my $i = 0; $i < $loop_count; $i++) {
\&        $total += $i;
\&      }
\&      
\&      return $total;
\&    }
\&  }
.Ve
.PP
\&\fBSPVM/MyMathNative.spvm\fR
.PP
.Vb 3
\&  class MyMathNative {
\&    native static method spvm_sum : int ($loop_count : int);
\&  }
.Ve
.PP
\&\fBSPVM/MyMath.config\fR
.PP
.Vb 2
\&  use strict;
\&  use warnings;
\&
\&  use SPVM::Builder::Config;
\&
\&  my $config = SPVM::Builder::Config\->new_gnu99;
\&
\&  $config;
.Ve
.PP
\&\fBSPVM/MyMathNative.c\fR
.PP
.Vb 1
\&  #include "spvm_native.h"
\&
\&  int32_t SPVM_\|_SPVM_\|_MyMathNative_\|_spvm_sum(SPVM_ENV* env, SPVM_VALUE* stack) {
\&    
\&    int32_t loop_count = stack[0].ival;
\&
\&    int32_t total = 0;
\&    for (int32_t i = 0; i < loop_count; i++) {
\&      total += i;
\&    }
\&    
\&    stack[0].ival = total;
\&    
\&    return 0;
\&  }
.Ve
