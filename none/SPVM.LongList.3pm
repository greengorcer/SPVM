.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::LongList 3"
.TH SPVM::LongList 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::LongList \- LongList in SPVM | Dynamic long array
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  use LongList;
\&  
\&  # Create a long list
\&  my $long_list = LongList\->new_len(10);
\&
\&  # Create a long list with array
\&  my $long_list = LongList\->new([(long)1, 2, 3]);
\&  
\&  # Get list length
\&  my $length = $long_list\->length;
\&  
\&  # Push long value
\&  $long_list\->push(3L);
\&
\&  # Pop long value.
\&  my $long_value = $long_list\->pop;
\&
\&  # Unshift long value.
\&  $long_list\->unshift(3L);
\&  
\&  # Shift long value.
\&  my $long_value = $long_list\->shift;
\&  
\&  # Set long value.
\&  $long_list\->set(2, 3L);
\&
\&  # Get long value.
\&  my $long_value = $long_list\->get(2);
\&
\&  # Insert long value
\&  $long_list\->insert(1, 3);
\&
\&  # Remove long value
\&  my $long_value = $long_list\->remove(1);
\&
\&  # Convert LongList to long array.
\&  my $long_array = $long_list\->to_array;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
LongList is dynamic long array.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    static method new : LongList ($array : long[])
.Ve
.PP
Create a new LongList object with specific \f(CW\*(C`long\*(C'\fR array.
.PP
Internally, new array is created, and each element of argument array is copied to internal array.
.PP
If array is undef, 0\-length internal array is created.
.SS "new_len"
.IX Subsection "new_len"
.Vb 1
\&    static method new_len : LongList ($length : int)
.Ve
.PP
Create a new LongList object with array length.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "get"
.IX Subsection "get"
.Vb 1
\&  method get : long ($index : int)
.Ve
.PP
Get the value with index.
.SS "insert"
.IX Subsection "insert"
.Vb 1
\&  method insert : void ($index : int, $value : long)
.Ve
.PP
Insert a element to the specific index.
.SS "length"
.IX Subsection "length"
.Vb 1
\&  static method length : int ()
.Ve
.PP
Get list length.
.SS "pop"
.IX Subsection "pop"
.Vb 1
\&  method pop : long ()
.Ve
.PP
Pops and returns the last value of the list, shortening the array by one element
If there are no elements in the list, exception occur.
.SS "push"
.IX Subsection "push"
.Vb 1
\&  method push : void ($value : long)
.Ve
.PP
Appending the value to the end of list.
.SS "remove"
.IX Subsection "remove"
.Vb 1
\&  method remove : long ($index : int)
.Ve
.PP
Remove and return the element which is specified by the index.
.SS "resize"
.IX Subsection "resize"
.Vb 1
\&  method resize : void ($new_length : int)
.Ve
.PP
Resize this list. If the new length is shorter than the current length, the list is truncated to the new length. If the new length is shorter than the current length, the list is truncated to the new length. If the new length is same as the current length, there is nothing to do. If the new length is longer than the current length, the list grows to the new length, and the values of the added elements are set to 0.
.PP
New length must be more than or equals to 0, otherwise a exception occur.
.SS "set"
.IX Subsection "set"
.Vb 1
\&  method set : void ($index : int, $value : long)
.Ve
.PP
Set the value with index.
.SS "set_array"
.IX Subsection "set_array"
.Vb 1
\&  method set_array : void ($array : long[])
.Ve
.PP
Set a array. Each elements of the array is copied to the correspoinding index of the array this list has.
.PP
Array must be defined, otherwise a exception occurs.
.PP
The length of argument array must be same as the length of current list array, otherwise a exception occures.
.SS "shift"
.IX Subsection "shift"
.Vb 1
\&  method shift : long ()
.Ve
.PP
Shifts the first value of the list off and returns it, shortening
the array by 1 and moving everything down.
If there are no elements in the list, exception occur.
.SS "to_array"
.IX Subsection "to_array"
.Vb 1
\&  method to_array : long[] ()
.Ve
.PP
Convert LongList to long array.
.SS "unshift"
.IX Subsection "unshift"
.Vb 1
\&  method unshift : void ($value : long)
.Ve
.PP
Appending the value to the top of list.
