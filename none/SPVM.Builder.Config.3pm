.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Builder::Config 3"
.TH SPVM::Builder::Config 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Builder::Config \- Configurations of Compile and Link of Native Sources
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SPVM::Builder::Config is configuration of c/c++ compile and link.
.SH "FIELDS"
.IX Header "FIELDS"
Fields.
.SS "ext"
.IX Subsection "ext"
.Vb 2
\&  my $ext = $config\->ext;
\&  $config\->ext($ext);
.Ve
.PP
Get and set the extension of the \s-1SPVM\s0 native source.
.PP
The default is \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  # Foo/Bar.c
\&  $config\->ext(\*(Aqc\*(Aq);
\&  
\&  # Foo/Bar.cpp
\&  $config\->ext(\*(Aqcpp\*(Aq);
.Ve
.SS "cc"
.IX Subsection "cc"
.Vb 2
\&  my $cc = $config\->cc;
\&  $config\->cc($cc);
.Ve
.PP
Get and set a compiler name. The default is the value of \f(CW\*(C`cc\*(C'\fR of Config module.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  # gcc
\&  $config\->cc(\*(Aqgcc\*(Aq);
\&  
\&  # g++ for C++
\&  $config\->cc(\*(Aqg++\*(Aq);
\&  
\&  # nvcc for CUDA/GUP
\&  $config\->cc(\*(Aqnvcc\*(Aq);
\&  
\&  # cc that compiled this Perl
\&  use Config;
\&  $config\->cc($Config{cc});
.Ve
.SS "cc_each"
.IX Subsection "cc_each"
.Vb 2
\&  my $cc_each = $config\->cc_each;
\&  $config\->cc_each($cc_each);
.Ve
.PP
Get and set a callback that returns the compiler name for each source file. The call back receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.PP
If \f(CW\*(C`cc_each\*(C'\fR is defined, the compiler use the return value of \f(CW\*(C`cc_each\*(C'\fR as the compiler name instead of \f(CW\*(C`cc\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->cc_each(sub {
\&    my ($config, $args) = @_;
\&    
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&    
\&    my $cc;
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $cc = \*(Aqgcc\*(Aq;
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $cc = \*(Aqg++\*(Aq;
\&    }
\&    
\&    return $cc;
\&  });
.Ve
.SS "include_dirs"
.IX Subsection "include_dirs"
.Vb 2
\&  my $include_dirs = $config\->include_dirs;
\&  $config\->include_dirs($include_dirs);
.Ve
.PP
Get and set header including directories of the compiler. This is same as \f(CW\*(C`\-I\*(C'\fR option of \f(CW\*(C`gcc\*(C'\fR.
.PP
The default value is \*(L"SPVM/Builder/include\*(R" of one up of directory that SPVM::Buidler::Config.pm is loaded.
.PP
At runtime, the \*(L"include\*(R" directory of the native module is added before \f(CW\*(C`include_dirs\*(C'\fR.
.SS "ccflags"
.IX Subsection "ccflags"
.Vb 2
\&  my $ccflags = $config\->ccflags;
\&  $config\->ccflags($ccflags);
.Ve
.PP
Get and set compiler flags.
.PP
\&\fBDefault:\fR
.PP
.Vb 2
\&  # $Config{cccdlflags} has \-fPIC.
\&  [\*(Aq\-fPIC\*(Aq]
\&  
\&  # Other
\&  []
.Ve
.SS "ccflags_each"
.IX Subsection "ccflags_each"
.Vb 2
\&  my $ccflags_each = $config\->ccflags_each;
\&  $config\->ccflags_each($ccflags_each);
.Ve
.PP
Get and set a callback that returns the compiler flags for each source file. The call back receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.IP "\(bu" 2
cc
.Sp
The compiler name that is the value after the process of the process of cc or cc_each.
.PP
If \f(CW\*(C`ccflags_each\*(C'\fR is defined, the compiler use the return value of \f(CW\*(C`ccflags_each\*(C'\fR as the compiler flags instead of \f(CW\*(C`ccflags\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->ccflags_each(sub {
\&    my ($config, $source_file) = @_;
\&
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&
\&    # The compiler name
\&    my $cc = $args\->{cc};
\&    
\&    # ccflags
\&    my $config_ccflags = $config\->ccflags;
\&    
\&    my $ccflags = [];
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $ccflags = [\*(Aq\-DFoo\*(Aq, @$config_ccflags];
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $ccflags = [\*(Aq\-DBar\*(Aq, @$config_ccflags];
\&    }
\&    
\&    return $ccflags;
\&  });
.Ve
.SS "optimize"
.IX Subsection "optimize"
.Vb 2
\&  my $optimize = $config\->optimize;
\&  $config\->optimize($optimize);
.Ve
.PP
Get and set the option for optimization of the compiler.
.PP
The default is \f(CW\*(C`\-O3\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 3
\&  $config\->optimize(\*(Aq\-O3\*(Aq);
\&  $config\->optimize(\*(Aq\-O2\*(Aq);
\&  $config\->optimize(\*(Aq\-g3 \-O0\*(Aq);
.Ve
.SS "optimize_each"
.IX Subsection "optimize_each"
.Vb 2
\&  my $optimize_each = $config\->optimize_each;
\&  $config\->optimize_each($optimize_each);
.Ve
.PP
Get and set a callback that returns the value of optimize for each source file. The callback receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.IP "\(bu" 2
cc
.Sp
The compiler name that is the value after the process of the process of cc or cc_each.
.PP
If \f(CW\*(C`optimize_each\*(C'\fR is defined, the compiler use the return value of \f(CW\*(C`optimize_each\*(C'\fR as the compiler flags instead of \f(CW\*(C`optimize\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->optimize_each(sub {
\&    my ($config, $source_file) = @_;
\&
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&
\&    # The compiler name
\&    my $cc = $args\->{cc};
\&    
\&    # optimize
\&    my $config_optimize = $config\->optimize;
\&    
\&    my $optimize = [];
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $optimize = \*(Aq\-O3\*(Aq;
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $optimize = \*(Aq\-O3\*(Aq;
\&    }
\&    
\&    return $optimize;
\&  });
.Ve
.SS "source_files"
.IX Subsection "source_files"
.Vb 2
\&  my $source_files = $config\->source_files;
\&  $config\->source_files($source_files);
.Ve
.PP
Get and get source files. These sourceraries are linked by the compiler.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->source_files([\*(Aqfoo.c\*(Aq, \*(Aqbar.c\*(Aq]);
.Ve
.SS "ld"
.IX Subsection "ld"
.Vb 2
\&  my $ld = $config\->ld;
\&  $config\->ld($ld);
.Ve
.PP
Get and set a linker. Default is \f(CW\*(C`ld\*(C'\fR of Config module.
.SS "lib_dirs"
.IX Subsection "lib_dirs"
.Vb 2
\&  my $lib_dirs = $config\->lib_dirs;
\&  $config\->lib_dirs($lib_dirs);
.Ve
.PP
Get and set the directories that libraries are searched for by the linker. This is same as \f(CW\*(C`\-L\*(C'\fR option of \f(CW\*(C`gcc\*(C'\fR.
.PP
\&\fBDefault:\fR
.PP
Windows
.PP
.Vb 1
\&  The directory that perlxxx.dll exists
.Ve
.PP
Not Windows
.PP
.Vb 1
\&  empty list
.Ve
.SS "libs"
.IX Subsection "libs"
.Vb 2
\&  my $libs = $config\->libs;
\&  $config\->libs($libs);
.Ve
.PP
Get and set libraries. These libraries are linked by the linker.
.PP
If a dynamic link library is found from \*(L"lib_dirs\*(R", this is linked. Otherwise if a static link library is found from \*(L"lib_dirs\*(R", this is linked.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->libs([\*(Aqgsl\*(Aq, \*(Aqpng\*(Aq]);
.Ve
.PP
If you want to link only dynamic link library, you can use the following hash reference as the value of the element instead of the library name.
.PP
.Vb 1
\&  {type => \*(Aqdynamic\*(Aq, name => \*(Aqgsl\*(Aq}
.Ve
.PP
If you want to link only static link library, you can use the following hash reference as the value of the element instead of the library name.
.PP
.Vb 1
\&  {type => \*(Aqstatic\*(Aq, name => \*(Aqgsl\*(Aq}
.Ve
.SS "resources"
.IX Subsection "resources"
.Vb 2
\&  my $resources = $config\->resources;
\&  $config\->resources($resources);
.Ve
.PP
Get and get resouce module names.
.PP
At runtime, each modules' native \*(L"include\*(R" directory is added before \f(CW\*(C`include_dirs\*(C'\fR, and \*(L"lib\*(R" directory is added before \f(CW\*(C`lib_dirs\*(C'\fR.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->resources([\*(AqSPVM::Resouce::Zlib::V1_15\*(Aq]);
.Ve
.SS "ldflags"
.IX Subsection "ldflags"
.Vb 2
\&  my ldflags = $config\->ldflags;
\&  $config\->ldflags(ldflags);
.Ve
.PP
Get and set linker flags. The default is emtpy array reference.
.PP
\&\fBDefault:\fR
.PP
Windows
.PP
.Vb 1
\&  [\*(Aq\-mdll\*(Aq, \*(Aq\-s\*(Aq]
.Ve
.PP
Non-Windows
.PP
.Vb 1
\&  [\*(Aq\-shared\*(Aq]
.Ve
.SS "ld_optimize"
.IX Subsection "ld_optimize"
.Vb 2
\&  my $ld_optimize = $config\->ld_optimize;
\&  $config\->ld_optimize($ld_optimize);
.Ve
.PP
Get and set the option for optimization of the linker such as \f(CW\*(C`\-O3\*(C'\fR, \f(CW\*(C`\-O2\*(C'\fR, \f(CW\*(C`\-g3 \-O0\*(C'\fR.
.PP
The default is \f(CW\*(C`\-O2\*(C'\fR.
.SS "force"
.IX Subsection "force"
.Vb 2
\&  my $force = $config\->force;
\&  $config\->force($force);
.Ve
.PP
Get and set the flag to force compiles and links without caching.
.SS "before_link"
.IX Subsection "before_link"
.Vb 2
\&  my $before_link = $config\->before_link;
\&  $config\->before_link($before_link);
.Ve
.PP
Get and set the callback that is executed before the link. The callback receives SPVM::Builder::Config object and the array reference of SPVM::Builder::ObjectFileInfo objects.
.PP
This callback must be return the array reference of SPVM::Builder::ObjectFileInfo objects that is used by the linker.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->before_link(sub {
\&    my ($config, $object_infos) = @_;
\&    
\&    # Do something
\&
\&    return $object_infos;
\&  });
.Ve
.SS "quiet"
.IX Subsection "quiet"
.Vb 2
\&  my $quiet = $config\->quiet;
\&  $config\->quiet($quiet);
.Ve
.PP
Get and set the flag if the compiler and the linker output the results.
.PP
The default is \f(CW1\fR.
.SH "Methods"
.IX Header "Methods"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $config = SPVM::Builder::Config\->new;
.Ve
.PP
Create SPVM::Builder::Config object.
.SS "new_c"
.IX Subsection "new_c"
.Vb 1
\&  my $config = SPVM::Builder::Config\->new_c;
.Ve
.PP
Create default build config with C settings. This is SPVM::Builder::Config object.
.PP
If you want to use the specific C version, use \f(CW\*(C`set_std\*(C'\fR method.
.PP
.Vb 1
\&  $config\->set_std(\*(Aqc99\*(Aq);
.Ve
.SS "new_c99"
.IX Subsection "new_c99"
.Vb 1
\&  my $config = SPVM::Builder::Config\->new_gnu99;
.Ve
.PP
Create default build config with C99 settings. This is SPVM::Builder::Config object.
.SS "new_cpp"
.IX Subsection "new_cpp"
.Vb 1
\&  my $config = SPVM::Builder::Config\->new_cpp;
.Ve
.PP
Create default build config with \*(C+ settings. This is SPVM::Builder::Config object.
.PP
If you want to use the specific \*(C+ version, use \f(CW\*(C`set_std\*(C'\fR method.
.PP
.Vb 1
\&  $config\->set_std(\*(Aqc++11\*(Aq);
.Ve
.SS "new_cpp11"
.IX Subsection "new_cpp11"
.Vb 1
\&  my $config = SPVM::Builder::Config\->new_cpp11;
.Ve
.PP
Create default build config with \*(C+11 settings. This is SPVM::Builder::Config object.
.SS "set_std"
.IX Subsection "set_std"
.Vb 1
\&  $config\->set_std($std);
.Ve
.PP
Add the value that is converted to \f(CW\*(C`\-std=$std\*(C'\fR after the last element of \f(CW\*(C`ccflags\*(C'\fR field.
.PP
\&\fBExample:\fR
.PP
.Vb 1
\&  $config\->set_std(\*(Aqgnu99\*(Aq);
.Ve
.SS "add_ccflags"
.IX Subsection "add_ccflags"
.Vb 1
\&  $config\->add_ccflags(@ccflags);
.Ve
.PP
Add values after the last element of \f(CW\*(C`ccflags\*(C'\fR field.
.SS "add_ldflags"
.IX Subsection "add_ldflags"
.Vb 1
\&  $config\->add_ldflags(@ldflags);
.Ve
.PP
Add values after the last element of \f(CW\*(C`ldflags\*(C'\fR field.
.SS "add_include_dirs"
.IX Subsection "add_include_dirs"
.Vb 1
\&  $config\->add_include_dirs(@include_dirs);
.Ve
.PP
Add values after the last element of \f(CW\*(C`include_dirs\*(C'\fR field.
.SS "add_lib_dirs"
.IX Subsection "add_lib_dirs"
.Vb 1
\&  $config\->add_lib_dirs(@lib_dirs);
.Ve
.PP
Add values after the last element of  \f(CW\*(C`lib_dirs\*(C'\fR field.
.SS "add_source_files"
.IX Subsection "add_source_files"
.Vb 1
\&  $config\->add_source_files(@source_files);
.Ve
.PP
Add the values after the last element of \f(CW\*(C`source_files\*(C'\fR field.
.SS "add_libs"
.IX Subsection "add_libs"
.Vb 1
\&  $config\->add_libs(@libs);
.Ve
.PP
Add the values after the last element of \f(CW\*(C`libs\*(C'\fR field.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->add_libs(\*(Aqgsl\*(Aq);
.Ve
.SS "add_static_libs"
.IX Subsection "add_static_libs"
.Vb 1
\&  $config\->add_static_libs(@libs);
.Ve
.PP
Add the values that each element is converted to the following hash reference after the last element of \f(CW\*(C`libs\*(C'\fR field.
.PP
.Vb 1
\&  {type => \*(Aqstatic\*(Aq, name => $lib}
.Ve
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->add_static_libs(\*(Aqgsl\*(Aq);
.Ve
.SS "add_dynamic_libs"
.IX Subsection "add_dynamic_libs"
.Vb 1
\&  $config\->add_dynamic_libs(@libs);
.Ve
.PP
Add the values that each element is converted to the following hash reference after the last element of \f(CW\*(C`libs\*(C'\fR field.
.PP
.Vb 1
\&  {type => \*(Aqdynamic\*(Aq, name => $lib}
.Ve
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->add_dynamic_libs(\*(Aqgsl\*(Aq);
.Ve
.SS "use"
.IX Subsection "use"
.Vb 1
\&  $config\->use(@resources);
.Ve
.PP
This method is the alias for \*(L"add_resources\*(R" to improve user experiences.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->use(\*(AqSPVM::Resouce::Zlib::V1_15\*(Aq);
.Ve
.SS "add_resources"
.IX Subsection "add_resources"
.Vb 1
\&  $config\->add_resources(@resources);
.Ve
.PP
Add the values after the last element of \f(CW\*(C`resources\*(C'\fR field.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&  $config\->add_resources(\*(AqSPVM::Resouce::Zlib::V1_15\*(Aq);
.Ve
.SS "to_hash"
.IX Subsection "to_hash"
.Vb 1
\&  my $config = $config\->to_hash;
.Ve
.PP
Convert SPVM::Builder::Config to a hash reference.
.SS "search_lib_dirs_from_cc_info"
.IX Subsection "search_lib_dirs_from_cc_info"
.Vb 1
\&  my $lib_dirs = $config\->search_lib_dirs_from_cc_info;
.Ve
.PP
Get the library searching directories parsing the infomation the compiler has.
.SS "search_lib_dirs_from_config_libpth"
.IX Subsection "search_lib_dirs_from_config_libpth"
.Vb 1
\&  my $lib_dirs = $config\->search_lib_dirs_from_config_libpth;
.Ve
.PP
Get the library searching directories parsing \f(CW\*(C`libpth\*(C'\fR of Config.
.SS "search_include_dirs_from_config_incpth"
.IX Subsection "search_include_dirs_from_config_incpth"
.Vb 1
\&  my $include_dirs = $config\->search_include_dirs_from_config_incpth;
.Ve
.PP
Get the header searching directories parsing \f(CW\*(C`incpth\*(C'\fR of Config.
.SS "sub get_include_dir"
.IX Subsection "sub get_include_dir"
.Vb 1
\&  my $include_dir = $config\->get_include_dir(_\|_FILE_\|_);
.Ve
.PP
Get the header include directory from the config file name.
.SS "get_src_dir"
.IX Subsection "get_src_dir"
.Vb 1
\&  my $src_dir = $config\->get_src_dir(_\|_FILE_\|_);
.Ve
.PP
Get the source directory from the config file name.
.SS "get_lib_dir"
.IX Subsection "get_lib_dir"
.Vb 1
\&  my $lib_dir = $config\->get_lib_dir(_\|_FILE_\|_);
.Ve
.PP
Get the library directory from the config file name.
.SS "is_exe"
.IX Subsection "is_exe"
.Vb 1
\&  my $is_exe = $config\->is_exe;
.Ve
.PP
Check this config is used for creating executalbe file. Always 0.
