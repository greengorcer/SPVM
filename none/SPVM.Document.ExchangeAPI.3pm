.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Document::ExchangeAPI 3"
.TH SPVM::Document::ExchangeAPI 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Document::ExchangeAPI \- SPVM Exchange API
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SPVM\s0 Exchange \s-1API\s0 is APIs to convert Perl data structures to/from \s-1SPVM\s0 data structures, and call \s-1SPVM\s0 Method from Perl.
.SH "FUNCTIONS AND METHODS"
.IX Header "FUNCTIONS AND METHODS"
Funtions and methods which create \s-1SPVM\s0 datas and convert \s-1SVPM\s0 datas to/from Perl data.
.SS "SPVM::Byte\->new"
.IX Subsection "SPVM::Byte->new"
.Vb 1
\&  my $spvm_byte = SPVM::Byte\->new(98);
.Ve
.PP
Convert a Perl scalar data to a SPVM::Byte object. Return value is \fBSPVM::Byte\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::Short\->new"
.IX Subsection "SPVM::Short->new"
.Vb 1
\&  my $spvm_short = SPVM::Short\->new(9800);
.Ve
.PP
Convert a Perl scalar data to a SPVM::Short object. Return value is \fBSPVM::Short\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::Int\->new"
.IX Subsection "SPVM::Int->new"
.Vb 1
\&  my $spvm_int = SPVM::Int\->new(100000);
.Ve
.PP
Convert a Perl scalar data to a SPVM::Int object. Return value is \fBSPVM::Int\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::Long\->new"
.IX Subsection "SPVM::Long->new"
.Vb 1
\&  my $spvm_long = SPVM::Long\->new(98);
.Ve
.PP
Convert a Perl scalar data to a SPVM::Long object. Return value is \fBSPVM::Long\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::Float\->new"
.IX Subsection "SPVM::Float->new"
.Vb 1
\&  my $spvm_float = SPVM::Float\->new(2.5);Rule to Convert
.Ve
.PP
Convert a Perl scalar data to a SPVM::Float object. Return value is \fBSPVM::Float\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::Double\->new"
.IX Subsection "SPVM::Double->new"
.Vb 1
\&  my $spvm_double = SPVM::Double\->new(2.5);
.Ve
.PP
Convert a Perl scalar data to a SPVM::Double object. Return value is \fBSPVM::Double\fR object which inherits SPVM::BlessedObject::Class.
.SS "SPVM::new_byte_array"
.IX Subsection "SPVM::new_byte_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_byte_array([1, 2, 3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`byte[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_byte_array_len"
.IX Subsection "SPVM::new_byte_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_byte_array_len([1, 2, 3]);
.Ve
.PP
Create a new \s-1SPVM\s0 \f(CW\*(C`byte[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_byte_array_from_bin"
.IX Subsection "SPVM::new_byte_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqc3\*(Aq, 97, 98, 99);
\&  my $spvm_byte_array = SPVM::new_byte_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 byte[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is interpreted as 8\-bit signed integers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.PP
You can use simple ascii codes as Perl binary data.
.PP
.Vb 2
\&  my $perl_binary ="abc";
\&  my $spvm_byte_array = SPVM::new_byte_array_from_bin($perl_binary);
.Ve
.PP
or \s-1UTF\-8\s0 bytes.
.PP
.Vb 3
\&  use utf8;
\&  my $perl_binary = encode(\*(AqUTF\-8\*(Aq, "あいう");
\&  my $spvm_string = SPVM::new_string_from_bin($perl_binary);
.Ve
.SS "SPVM::new_byte_array_from_string"
.IX Subsection "SPVM::new_byte_array_from_string"
.Vb 2
\&  use utf8;
\&  my $spvm_byte_array = SPVM::new_byte_array_from_string("あいう");
.Ve
.PP
Convert a decoded string to \s-1SPVM\s0 byte[] value using utf8::encode. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.SS "SPVM::new_short_array"
.IX Subsection "SPVM::new_short_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_short_array([1, 2, 3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`short[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_short_array_len"
.IX Subsection "SPVM::new_short_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_short_array_len($length);
.Ve
.PP
Create a new  a \s-1SPVM\s0 \f(CW\*(C`short[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_short_array_from_bin"
.IX Subsection "SPVM::new_short_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqc3\*(Aq, 97, 98, 99);
\&  my $spvm_short_array = SPVM::new_short_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 short[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is interpreted as 16\-bit signed integers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_int_array"
.IX Subsection "SPVM::new_int_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_int_array([1, 2, 3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`int[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_int_array_len"
.IX Subsection "SPVM::new_int_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_int_array_len($length);
.Ve
.PP
Create a new  a \s-1SPVM\s0 \f(CW\*(C`int[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_int_array_from_bin"
.IX Subsection "SPVM::new_int_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aql3\*(Aq, 97, 98, 99);
\&  my $spvm_int_array = SPVM::new_int_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 int[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is interpreted as 8\-bit signed integers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_long_array"
.IX Subsection "SPVM::new_long_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_long_array([1, 2, 3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`long[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_long_array_len"
.IX Subsection "SPVM::new_long_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_long_array_len($length);
.Ve
.PP
Create a new  a \s-1SPVM\s0 \f(CW\*(C`long[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_long_array_from_bin"
.IX Subsection "SPVM::new_long_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqq3\*(Aq, 97, 98, 99);
\&  my $spvm_long_array = SPVM::new_long_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 long[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is longerpreted as 8\-bit signed longegers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_float_array"
.IX Subsection "SPVM::new_float_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_float_array([1.2, 2.5, 3.3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`float[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_float_array_len"
.IX Subsection "SPVM::new_float_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_float_array_len($length);
.Ve
.PP
Create a new  a \s-1SPVM\s0 \f(CW\*(C`float[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_float_array_from_bin"
.IX Subsection "SPVM::new_float_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqf3\*(Aq, 0.5, 1.5, 2.5);
\&  my $spvm_float_array = SPVM::new_float_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 float[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is floaterpreted as 8\-bit signed floategers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_double_array"
.IX Subsection "SPVM::new_double_array"
.Vb 1
\&  my $spvm_nums = SPVM::new_double_array([1.2, 2.5, 3.3]);
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 \f(CW\*(C`double[]\*(C'\fR array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the first argument is a \f(CW\*(C`undef\*(C'\fR value, the return value is a \f(CW\*(C`undef\*(C'\fR value.
.SS "SPVM::new_double_array_len"
.IX Subsection "SPVM::new_double_array_len"
.Vb 1
\&  my $spvm_nums = SPVM::new_double_array_len($length);
.Ve
.PP
Create a new  a \s-1SPVM\s0 \f(CW\*(C`double[]\*(C'\fR array with length. The values of elements is zeros. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The lenght must be more than or equals to zero, otherwise an exception occurs.
.SS "SPVM::new_double_array_from_bin"
.IX Subsection "SPVM::new_double_array_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqf3\*(Aq, 0.5, 1.5, 2.5);
\&  my $spvm_double_array = SPVM::new_double_array_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 double[] object. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
Thg Perl binary data is doubleerpreted as 8\-bit signed doubleegers. The created array length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_string"
.IX Subsection "SPVM::new_string"
.Vb 2
\&  use utf8;
\&  my $spvm_string = SPVM::new_string("あいう");
.Ve
.PP
Convert a Perl string to a \s-1SPVM\s0 string.
.PP
If the argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "SPVM::new_string_from_bin"
.IX Subsection "SPVM::new_string_from_bin"
.Vb 2
\&  my $perl_binary = pack(\*(Aqc3\*(Aq, 97, 98, 99);
\&  my $spvm_string = SPVM::new_string_from_bin($perl_binary);
.Ve
.PP
Convert a Perl Binary Data to \s-1SPVM\s0 string object. Return value is SPVM::BlessedObject::String object which wraps the \s-1SPVM\s0 string.
.PP
Thg Perl binary data is interpreted as 8\-bit signed integers. The string length is automatically calcurated from the Perl binary data.
.PP
If the first argument is \f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`undef\*(C'\fR is returned.
.PP
You can use simple ascii codes as Perl binary data.
.PP
.Vb 2
\&  my $binary ="abc";
\&  my $spvm_string = SPVM::new_string_from_bin($perl_binary);
.Ve
.PP
or \s-1UTF\-8\s0 bytes.
.PP
.Vb 3
\&  use utf8;
\&  my $perl_binary = encode(\*(AqUTF\-8\*(Aq, "あいう");
\&  my $spvm_string = SPVM::new_string_from_bin($perl_binary);
.Ve
.SS "SPVM::new_object_array"
.IX Subsection "SPVM::new_object_array"
.Vb 4
\&  my $byte_array = SPVM::new_object_array(
\&    "SPVM::Byte[]",
\&    [SPVM::Byte\->new(1), SPVM::Byte>new(2), SPVM::Byte\->new(3)]
\&  );
.Ve
.PP
Convert a Perl array reference to a \s-1SPVM\s0 object array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The first argument is a \s-1SPVM\s0 array type name. If the type is non-existent, an exception occurs.
.PP
The second argument is a Perl array reference. Each element must be valid value or \f(CW\*(C`undef\*(C'\fR, otherwise an exception occurs.
.PP
Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
You can also create multidimensional array.
.PP
.Vb 3
\&  my $object1 = SPVM::new_int_array([1, 2, 3]);
\&  my $object2 = SPVM::new_int_array([4, 5, 6]);
\&  my $oarray = SPVM::new_object_array("int[][]",[$object1, $object2]);
.Ve
.SS "SPVM::new_mulnum_array"
.IX Subsection "SPVM::new_mulnum_array"
Convert a Perl array references to \s-1SPVM\s0 multi numeric array.
.PP
.Vb 6
\&  my $perl_values = [
\&    {x => 0, y => 1, z => 2},
\&    {x => 3, y => 4, z => 5},
\&    {x => 6, y => 7, z => 8},
\&  ];
\&  my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3i[]", $perl_values);
.Ve
.PP
The first argument is a \s-1SPVM\s0 array type name. If the type is non-existent, an exception occurs.
.PP
The second argument is a Perl array of hash references. Each hash reference must be contain all fields of the multi numeric value, otherwise an exception occurs.
.PP
Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
\&\fBExamples:\fR
.PP
.Vb 9
\&  # new_mulnum_array \- byte
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3b[]", $values);
\&  }
\&
\&  # new_mulnum_array \- short
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3s[]",$values);
\&  }
\&
\&  # new_mulnum_array \- int
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3i[],$values);
\&  }
\&
\&  # new_mulnum_array \- long
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3l[]", $values);
\&  }
\&
\&  # new_mulnum_array \- float
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3f[]",$values);
\&  }
\&
\&  # new_mulnum_array \- double
\&  {
\&    my $values = [
\&      {x => 0, y => 1, z => 2},
\&      {x => 3, y => 4, z => 5},
\&      {x => 6, y => 7, z => 8},
\&    ];
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array("TestCase::Point_3d[],"$values);
\&    ok(SPVM::TestCase::ExchangeAPI\-spvm_new_mulnum_array_double($spvm_mulnum_array));
\&    my $out_values = $spvm_mulnum_array\->to_elems;
\&    is_deeply($out_values, $values);
\&  }
.Ve
.SS "SPVM::new_mulnum_array_from_bin"
.IX Subsection "SPVM::new_mulnum_array_from_bin"
.Vb 2
\&  my $binary = pack(\*(Aql9\*(Aq, ($INT_MIN, 1, 2), (3, 4, 5), (6, 7, 8));
\&  my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3i[]", $binary);
.Ve
.PP
Convert Perl a binary data to \s-1SPVM\s0 Multi Numeric Array. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
The first argument is a multi numeric array type of \s-1SPVM.\s0
.PP
The second argument is the Perl packed binary data. The length of the created array is calcurated automatically.
.PP
\&\fBExamples:\fR
.PP
.Vb 5
\&  # new_mulnum_array_from_bin \- byte
\&  {
\&    my $binary = pack(\*(Aqc9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8));
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3b[]", $binary);
\&  }
\&
\&  # new_mulnum_array_from_bin \- short
\&  {
\&    my $binary = pack(\*(Aqs9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8);;
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3s[]", $binary);
\&  }
\&
\&  # new_mulnum_array_from_bin \- int
\&  {
\&    my $binary = pack(\*(Aql9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8));
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3i[]", $binary);
\&  }
\&
\&  # new_mulnum_array_from_bin \- long
\&  {
\&    my $binary = pack(\*(Aqq9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8));
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3l[]", $binary);
\&  }
\&
\&  # new_mulnum_array_from_bin \- float
\&  {
\&    my $binary = pack(\*(Aqf9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8));
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3f[]", $binary);
\&  }
\&
\&  # new_mulnum_array_from_bin \- double
\&  {
\&    my $binary = pack(\*(Aqd9\*(Aq, (0, 1, 2), (3, 4, 5), (6, 7, 8));
\&    my $spvm_mulnum_array = SPVM::new_mulnum_array_from_bin("TestCase::Point_3d[]", $binary);
\&  }
.Ve
.ie n .SS "$spvm_array\->length"
.el .SS "\f(CW$spvm_array\fP\->length"
.IX Subsection "$spvm_array->length"
.Vb 1
\&  my $length = $spvm_array\->length;
.Ve
.PP
Get the length of \s-1SPVM\s0 array. \f(CW$spvm_array\fR means a  SPVM::BlessedObject::Array object.
.ie n .SS "$spvm_array\->to_elems"
.el .SS "\f(CW$spvm_array\fP\->to_elems"
.IX Subsection "$spvm_array->to_elems"
.Vb 1
\&  my $perl_array_ref = $spvm_array\->to_elems;
.Ve
.PP
Convert a \s-1SPVM\s0 array to Perl a array reference.
.PP
If the \s-1SPVM\s0 array is numeric array type, the element of the Perl array is numeric value.
.PP
If the \s-1SPVM\s0 array is object array type, the element of the Perl array is a object which inherits SPVM::BlessedObject or \f(CW\*(C`undef\*(C'\fR.
.PP
If the \s-1SPVM\s0 array is multi numeric array type, the element of the Perl array is a hash reference.
.ie n .SS "$spvm_array\->to_bin"
.el .SS "\f(CW$spvm_array\fP\->to_bin"
.IX Subsection "$spvm_array->to_bin"
.Vb 1
\&  my $perl_binary = $spvm_array\->to_bin;
.Ve
.PP
Convert a \s-1SPVM\s0 Array to Perl binary data.
.PP
If the \s-1SPVM\s0 array is a numeric array type or a multi numeric type, the binary representation of \s-1SPVM\s0 is copied directly into a scalar variable.
.PP
If the Array of \s-1SPVM\s0 is of any other type, an exception occurs.
.ie n .SS "$spvm_data\->to_string"
.el .SS "\f(CW$spvm_data\fP\->to_string"
.IX Subsection "$spvm_data->to_string"
Convert a \s-1SPVM\s0 string or a \s-1SPVM\s0 byte[] array to a Perl string(a decoded string).
.PP
If the type is other one, an exception occurs.
.ie n .SS "$spvm_array\->to_strings"
.el .SS "\f(CW$spvm_array\fP\->to_strings"
.IX Subsection "$spvm_array->to_strings"
<pre>
my \f(CW$perl_array_ref\fR = \f(CW$spvm_string_array\fR\->to_strings;
</pre>
.PP
Convert a \s-1SPVM\s0 string array to a Perl array reference which the element is a string(decoded string) or \f(CW\*(C`undef\*(C'\fR. Return value is SPVM::BlessedObject::Array object which wraps the \s-1SPVM\s0 array.
.PP
If the \s-1SPVM\s0 data type is not a string array, an exception occurs.
.SS "SPVM::get_exception"
.IX Subsection "SPVM::get_exception"
<pre>
my \f(CW$exception\fR = \fBSPVM::get_exception()\fR;
</pre>
.PP
Get the exception of the \s-1SPVM\s0 runtime environment as SPVM::BlessedObject::String object.
.SS "SPVM::set_exception"
.IX Subsection "SPVM::set_exception"
Set a \s-1SPVM\s0 exception of the \s-1SPVM\s0 runtime environment.
.PP
The argument must be a SPVM::BlessedObject::String object, a decoded string or \f(CW\*(C`undef\*(C'\fR, otherwise an exception occurs.
.PP
<pre>
SPVM::set_exception(SPVM::new_string(\*(L"abc\*(R"));
SPVM::set_exception(\*(L"abc\*(R");
SPVM::set_exception(undef);
</pre>
.SS "SPVM::get_memory_blocks_count"
.IX Subsection "SPVM::get_memory_blocks_count"
.Vb 1
\&  my $count = SPVM::get_memory_blocks_count();
.Ve
.PP
Get the count of created memory blocks. \s-1SPVM\s0 runtime create a memory block on the heap when a object is created or new week reference is created.
.PP
You can check the memory leaks by this method.
.PP
.Vb 2
\&  # First Memory Blocks Count
\&  my $start_memory_blocks_count = SPVM::get_memory_blocks_count();
\&
\&  # Processing
\&  # ...
\&
\&  # Last Memory Blocks Count
\&  my $end_memory_blocks_count = SPVM::get_memory_blocks_count();
\&
\&  unless ($end_memory_blocks_count == $start_memory_blocks_count) {
\&    die"Memroy leak";
\&  }
.Ve
.SH "LOAD SPVM MODULE"
.IX Header "LOAD SPVM MODULE"
If you load \s-1SVPM\s0 module from Perl, use the following syntax.
.PP
.Vb 1
\&  use SPVM \*(AqFoo\*(Aq;
.Ve
.PP
Suppose the following \f(CW\*(C`SPVM/Foo.spvm\*(C'\fR is placed on a module search path.
.PP
.Vb 6
\&  # SPVM/Foo.spvm
\&  class Foo {
\&    static method sum : int ($x1 : int, $x2 : int) {
\&      return $x1 + $x2;
\&    }
\&  }
.Ve
.PP
If you load \s-1SPVM\s0 \f(CW\*(C`Foo::Bar\*(C'\fR module, do the following.
.PP
.Vb 1
\&  use SPVM \*(AqFoo::Bar\*(Aq;
.Ve
.PP
Suppose the following \f(CW\*(C`SPVM/Foo/Bar.spvm\*(C'\fR is placed on a module search path.
.PP
.Vb 6
\&  # SPVM/Foo/Bar.spvm
\&  class Foo::Bar {
\&    static method sum : int ($x1 : int, $x2 : int) {
\&      return $x1 + $x2;
\&    }
\&  }
.Ve
.PP
\&\f(CW\*(C`use SPVM MODULE_NAME\*(C'\fR compile the \s-1SPVM\s0 module and the dependent modules.
.PP
Note that at this point a \s-1SPVM\s0 runtime has not yet been created.
.PP
A default \s-1SPVM\s0 runtime is created the first time you call a method of \s-1SPVM\s0 module or call a function or method of the Exchange \s-1API.\s0
.SH "CALL SPVM METHOD"
.IX Header "CALL SPVM METHOD"
The method of \s-1SPVM\s0 module can be called from Perl directory.
.SS "\s-1CALL CLASS METHOD\s0"
.IX Subsection "CALL CLASS METHOD"
Let's call \s-1SPVM\s0 class method from Perl.
.PP
.Vb 1
\&  use SPVM \*(AqFoo\*(Aq;
\&
\&  my $total = SPVM::Foo\->sum(1, 2);
.Ve
.PP
The definition of \f(CW\*(C`Foo\*(C'\fR module is the following.
.PP
.Vb 6
\&  # SPVM/Foo.spvm
\&  class Foo {
\&    static method sum : int ($x1 : int, $x2 : int) {
\&      return $x1 + $x2;
\&    }
\&  }
.Ve
.PP
If the number of arguments does not match the number of arguments of the \s-1SPVM\s0 method, an exception occurs.
.PP
The Perl values of the arguments are converted to the \s-1SPVM\s0 values by the rule of argument convertion.
.PP
If the type is non-conforming, an exception occurs.
.PP
The \s-1SPVM\s0 return value is converted to a Perl return value by the rule of return value convertion.
.PP
The \s-1SPVM\s0 exception is converted to a Perl exception.
.SS "\s-1CALL INSTANCE METHOD\s0"
.IX Subsection "CALL INSTANCE METHOD"
Let's call \s-1SPVM\s0 instance method from Perl.
.PP
.Vb 1
\&  use SPVM \*(AqFoo\*(Aq;
\&
\&  my $foo = SPVM::Foo\->new;
\&
\&  my $total = $foo\->sum(1, 2);
.Ve
.PP
The definition of \f(CW\*(C`Foo\*(C'\fR module is the following.
.PP
.Vb 5
\&  # SPVM/Foo.spvm
\&  class Foo {
\&    static method new : Foo () {
\&      return new Foo;
\&    }
\&
\&    method sum : int ($x1 : int, $x2 : int) (
\&      return $x1 + $x2;
\&    }
\&  }
.Ve
.SH "ARGUMENT CONVERSION"
.IX Header "ARGUMENT CONVERSION"
Perl arguments are converted to \s-1SPVM\s0 arguments in the following rules.
.SS "Argument general exception"
.IX Subsection "Argument general exception"
If the count of given arguments is less than the count of the arguments of the method, an exception occurs.
.PP
If the count of given arguments is more than the count of the arguments of the method, an exception occurs.
.SS "Perl scalar to \s-1SPVM\s0 byte"
.IX Subsection "Perl scalar to SPVM byte"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`byte\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`byte\*(C'\fR value using SvIV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (int8_t)SvIV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : byte) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(12);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 short"
.IX Subsection "Perl scalar to SPVM short"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`short\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`short\*(C'\fR value using SvIV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (int16_t)SvIV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : short) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(12);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 int"
.IX Subsection "Perl scalar to SPVM int"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`int\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`int\*(C'\fR value using SvIV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (int32_t)SvIV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : int) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(12);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 long"
.IX Subsection "Perl scalar to SPVM long"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`long\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`long\*(C'\fR value using SvIV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (int64_t)SvIV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : long) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(12);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 float"
.IX Subsection "Perl scalar to SPVM float"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`float\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`float\*(C'\fR value using SvNV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (float)SvNV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : float) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(1.2);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 double"
.IX Subsection "Perl scalar to SPVM double"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`double\*(C'\fR, Perl scalar is converted to \s-1SPVM\s0 \f(CW\*(C`double\*(C'\fR value using SvNV of perlapi <https://perldoc.perl.org/perlapi#SvIV>
.PP
The conversion logic is
.PP
.Vb 1
\&  (double)SvNV(perl_scalar)
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : double) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(1.2);
.Ve
.SS "Perl scalar to \s-1SPVM\s0 string"
.IX Subsection "Perl scalar to SPVM string"
If the \s-1SPVM\s0 argument type is \f(CW\*(C`string\*(C'\fR, the given Perl scalar is converted by the following rules.
.PP
If any of the following rules does not match, an exception occurs.
.PP
\fIPerl non-ref scalar to \s-1SPVM\s0 string\fR
.IX Subsection "Perl non-ref scalar to SPVM string"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`string\*(C'\fR, the given Perl non-ref scalar is converted to SPVM::BlessedObject::String object.
.PP
The given non-ref scalar value is assumed to a Perl decoded string, and is converted to \s-1UTF\-8\s0 bytes.
.PP
If the given non-ref scalar value is Perl \f(CW\*(C`undef\*(C'\fR, it is converted to Perl \f(CW\*(C`undef\*(C'\fR.
.PP
And the following \*(L"Perl SPVM::BlessedObject::String to \s-1SPVM\s0 string\*(R" conversion is contined.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : string) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo("あいう");
.Ve
.PP
\fIPerl SPVM::BlessedObject::String to \s-1SPVM\s0 string\fR
.IX Subsection "Perl SPVM::BlessedObject::String to SPVM string"
.PP
No conversion occurs.
.PP
Perl can have \s-1SPVM\s0 string itself as SPVM::BlessedObject::String object. This object is created by such as \*(L"SPVM::new_string\*(R", \*(L"SPVM::new_string_from_bin\*(R", or got as a return value of \s-1SPVM\s0 method.
.PP
If the given value is Perl \f(CW\*(C`undef\*(C'\fR, it is converted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : string) { ... }
\&  }
\&  
\&  # Perl
\&  my $string = SPVM::new_string("あいう");
\&  SPVM::My\->foo($string);
.Ve
.SS "Perl SPVM::BlessedObject::Class to \s-1SPVM\s0 class"
.IX Subsection "Perl SPVM::BlessedObject::Class to SPVM class"
No conversion occurs.
.PP
Perl can have \s-1SPVM\s0 class object itself as a object which inherits SPVM::BlessedObject::Class. This object is created by a contructor such as SPVM::Int\->new, SPVM::MyClass\->new.
.PP
If the given value is Perl \f(CW\*(C`undef\*(C'\fR, it is converted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
If class name is different, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : SPVM::Int) { ... }
\&  }
\&  
\&  # Perl
\&  my $value = SPVM::Int\->new(5);
\&  SPVM::My\->foo($value);
.Ve
.SS "Perl SPVM::BlessedObject to \s-1SPVM\s0 any object"
.IX Subsection "Perl SPVM::BlessedObject to SPVM any object"
No conversion occurs.
.PP
Perl can have \s-1SPVM\s0 object itself as a SPVM::BlessedObject object. This object is created by a contructor or functions of exchange \s-1API\s0 such as SPVM::Int\->new, SPVM::MyClass\->new, SPVM::new_int_array.
.PP
If the given value is Perl \f(CW\*(C`undef\*(C'\fR, it is converted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : object) { ... }
\&  }
\&  
\&  # Perl
\&  my $value = SPVM::Int\->new(5);
\&  SPVM::My\->foo($value);
.Ve
.SS "Perl array reference to \s-1SPVM\s0 array"
.IX Subsection "Perl array reference to SPVM array"
A Perl array reference is converted to a \s-1SPVM\s0 array by the following rules.
.PP
\fIPerl array reference to \s-1SPVM\s0 byte array\fR
.IX Subsection "Perl array reference to SPVM byte array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`byte[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`byte[]\*(C'\fR. Each element is converted to \f(CW\*(C`byte\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 byte. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : byte[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1, 2, 3]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 short array\fR
.IX Subsection "Perl array reference to SPVM short array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`short[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`short[]\*(C'\fR. Each element is converted to \f(CW\*(C`short\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 short. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : short[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1, 2, 3]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 int array\fR
.IX Subsection "Perl array reference to SPVM int array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`int[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`int[]\*(C'\fR. Each element is converted to \f(CW\*(C`int\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 int. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : int[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1, 2, 3]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 long array\fR
.IX Subsection "Perl array reference to SPVM long array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`long[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`long[]\*(C'\fR. Each element is converted to \f(CW\*(C`long\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 long. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : long[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1, 2, 3]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 float array\fR
.IX Subsection "Perl array reference to SPVM float array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`float[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`float[]\*(C'\fR. Each element is converted to \f(CW\*(C`float\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 float. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : float[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1.2, 2.3, 3.4]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 double array\fR
.IX Subsection "Perl array reference to SPVM double array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`double[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`double[]\*(C'\fR. Each element is converted to \f(CW\*(C`double\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 double. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : double[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([1.2, 2.3, 3.4]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 string array\fR
.IX Subsection "Perl array reference to SPVM string array"
.PP
If the \s-1SPVM\s0 argument type is \f(CW\*(C`string[]\*(C'\fR, the Perl array reference is converted to \s-1SPVM\s0 array which type is \f(CW\*(C`string[]\*(C'\fR. Each element is converted to \f(CW\*(C`string\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 string. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : string[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo(["あい", "うえ", "お"]);
.Ve
.PP
\fIPerl array reference to \s-1SPVM\s0 multi numeric array\fR
.IX Subsection "Perl array reference to SPVM multi numeric array"
.PP
If the \s-1SPVM\s0 argument type is a array of multi numeric type, the given Perl array reference is converted to \s-1SPVM\s0 multi numeric array which element type is multi numeric type. Each element which is a hash reference is converted to multi numeric type by the rule of Perl hash reference to \s-1SPVM\s0 multi numeric type. Perl \f(CW\*(C`undef\*(C'\fR is coverted to \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : Complex_2d[]) { ... }
\&  }
\&  
\&  # Perl
\&  SPVM::My\->foo([{re => 1.2, im => 2.3}, {re => 3.4, im => 4.5}]);
.Ve
.SS "Perl SPVM::BlessedObject::Array to \s-1SPVM\s0 array"
.IX Subsection "Perl SPVM::BlessedObject::Array to SPVM array"
No conversion occurs.
.PP
Perl can have \s-1SPVM\s0 array itself as SPVM::BlessedObject::Array object. This object is created by such as \*(L"SPVM::new_byte_array\*(R", \*(L"SPVM::new_short_array\*(R", \*(L"SPVM::new_int_array\*(R", \*(L"SPVM::new_long_array\*(R", \*(L"SPVM::new_float_array\*(R", \*(L"SPVM::new_double_array\*(R", or got as a return value of \s-1SPVM\s0 method.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($values : int[]) { ... }
\&  }
\&  
\&  # Perl
\&  my $array = SPVM::new_int_array([1, 2, 3]);
\&  SPVM::My\->foo($array);
.Ve
.SS "Perl hash reference to \s-1SPVM\s0 multi numeric"
.IX Subsection "Perl hash reference to SPVM multi numeric"
If the \s-1SPVM\s0 argument type is a multi numeric type, the given argument is converted by the following rules.
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric byte\fR
.IX Subsection "Perl hash reference to SPVM multi numeric byte"
.PP
If the argument type is a multi numeric byte type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric byte type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`byte\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 byte.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2b {
\&    has x : byte;
\&    has y : byte;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2b);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1, y => 2});
.Ve
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric short\fR
.IX Subsection "Perl hash reference to SPVM multi numeric short"
.PP
If the argument type is a multi numeric short type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric short type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`short\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 short.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2s {
\&    has x : short;
\&    has y : short;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2s);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1, y => 2});
.Ve
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric int\fR
.IX Subsection "Perl hash reference to SPVM multi numeric int"
.PP
If the argument type is a multi numeric int type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric int type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`int\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 int.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2i {
\&    has x : int;
\&    has y : int;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2i);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1, y => 2});
.Ve
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric long\fR
.IX Subsection "Perl hash reference to SPVM multi numeric long"
.PP
If the argument type is a multi numeric long type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric long type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`long\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 long.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2l {
\&    has x : long;
\&    has y : long;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2l);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1, y => 2});
.Ve
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric float\fR
.IX Subsection "Perl hash reference to SPVM multi numeric float"
.PP
If the argument type is a multi numeric float type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric float type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`float\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 float.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2f {
\&    has x : float;
\&    has y : float;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2f);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1.2, y => 2.3});
.Ve
.PP
\fIPerl hash reference to \s-1SPVM\s0 multi numeric double\fR
.IX Subsection "Perl hash reference to SPVM multi numeric double"
.PP
If the argument type is a multi numeric double type, the given argument is hash reference is converted to the value of \s-1SPVM\s0 multi numeric double type. If the given argument is different from a hash reference, an exception occurs. Each field is converted to \f(CW\*(C`double\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 double.
.PP
If a filed is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2d {
\&    has x : double;
\&    has y : double;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2d);
\&  }
\&
\&  # Perl
\&  SPVM::My\->foo({x => 1.2, y => 2.3});
.Ve
.SS "Perl reference to \s-1SPVM\s0 numeric reference"
.IX Subsection "Perl reference to SPVM numeric reference"
If the \s-1SPVM\s0 argument type is numeric reference type, the given Perl reference is converted to \s-1SPVM\s0 numeric reference type in the following rules.
.PP
\fIPerl reference to \s-1SPVM\s0 byte reference\fR
.IX Subsection "Perl reference to SPVM byte reference"
.PP
If the \s-1SPVM\s0 argument type is byte reference type, the given Perl reference is converted to \s-1SPVM\s0 byte reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`byte\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 byte and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 byte to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : byte*);
\&  }
\&
\&  # Perl
\&  my $value = 23;
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 short reference\fR
.IX Subsection "Perl reference to SPVM short reference"
.PP
If the \s-1SPVM\s0 argument type is short reference type, the given Perl reference is converted to \s-1SPVM\s0 short reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`short\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 short and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 short to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : short*);
\&  }
\&
\&  # Perl
\&  my $value = 23;
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 int reference\fR
.IX Subsection "Perl reference to SPVM int reference"
.PP
If the \s-1SPVM\s0 argument type is int reference type, the given Perl reference is converted to \s-1SPVM\s0 int reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`int\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 int and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 int to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : int*);
\&  }
\&
\&  # Perl
\&  my $value = 23;
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 long reference\fR
.IX Subsection "Perl reference to SPVM long reference"
.PP
If the \s-1SPVM\s0 argument type is long reference type, the given Perl reference is converted to \s-1SPVM\s0 long reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`long\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 long and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 long to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : long*);
\&  }
\&
\&  # Perl
\&  my $value = 23;
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 float reference\fR
.IX Subsection "Perl reference to SPVM float reference"
.PP
If the \s-1SPVM\s0 argument type is float reference type, the given Perl reference is converted to \s-1SPVM\s0 float reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`float\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 float and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 float to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : float*);
\&  }
\&
\&  # Perl
\&  my $value = 23.5;
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 double reference\fR
.IX Subsection "Perl reference to SPVM double reference"
.PP
If the \s-1SPVM\s0 argument type is double reference type, the given Perl reference is converted to \s-1SPVM\s0 double reference type.
.PP
The given value must be a scalar reference which referenced value is non-ref scalar, otherwise an exception occurs.
.PP
The given value is converted to \f(CW\*(C`double\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 double and return value is converted to Perl scalar by the rule of \s-1SPVM\s0 double to Perl scalar
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&  # SPVM method definition
\&  class My {
\&    static method foo : void ($value : double*);
\&  }
\&
\&  # Perl
\&  my $value = 23.5;
\&  SPVM::My\->foo(\e$value);
.Ve
.SS "Perl reference to \s-1SPVM\s0 multi numeric reference"
.IX Subsection "Perl reference to SPVM multi numeric reference"
If the \s-1SPVM\s0 argument type is multi numeric reference type, the given Perl reference is converted by the following rules.
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric byte reference\fR
.IX Subsection "Perl reference to SPVM multi numeric byte reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric byte reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric byte reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`byte\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 byte and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 byte to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2b {
\&    has x : byte;
\&    has y : byte;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2b);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1, y => 2};
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric short reference\fR
.IX Subsection "Perl reference to SPVM multi numeric short reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric short reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric short reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`short\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 short and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 short to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2s {
\&    has x : short;
\&    has y : short;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2s);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1, y => 2};
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric int reference\fR
.IX Subsection "Perl reference to SPVM multi numeric int reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric int reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric int reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`int\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 int and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 int to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2i {
\&    has x : int;
\&    has y : int;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2i);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1, y => 2};
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric long reference\fR
.IX Subsection "Perl reference to SPVM multi numeric long reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric long reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric long reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`long\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 long and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 long to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2l {
\&    has x : long;
\&    has y : long;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2l);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1, y => 2};
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric float reference\fR
.IX Subsection "Perl reference to SPVM multi numeric float reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric float reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric float reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`float\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 float and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 float to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2f {
\&    has x : float;
\&    has y : float;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2f);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1,2, y => 2.3};
\&  SPVM::My\->foo(\e$value);
.Ve
.PP
\fIPerl reference to \s-1SPVM\s0 multi numeric double reference\fR
.IX Subsection "Perl reference to SPVM multi numeric double reference"
.PP
If the \s-1SPVM\s0 argument type is multi numeric double reference type, the given Perl reference is converted to \s-1SPVM\s0 multi numeric double reference type.
.PP
The given reference must be a scalar reference of hash reference, otherwise an exception occurs.
.PP
The each field of the hash of the given argument is converted to \f(CW\*(C`double\*(C'\fR value by the rule of Perl scalar to \s-1SPVM\s0 double and the each filed of the return value is converted to Perl scalar by the rule of \s-1SPVM\s0 double to Perl scalar
.PP
If a field is missing, an exception occurs.
.PP
\&\fBExample:\fR
.PP
.Vb 8
\&  # SPVM multi numeric type and method definition
\&  class MyPoint_2d {
\&    has x : double;
\&    has y : double;
\&  }
\&  class My {
\&    static method foo : void ($value : MyPoint_2d);
\&  }
\&
\&  # Perl
\&  my $value = {x => 1.2, y => 2.3};
\&  SPVM::My\->foo(\e$value);
.Ve
.SH "RETURN VALUE CONVERSION"
.IX Header "RETURN VALUE CONVERSION"
a \s-1SPVM\s0 return value is converted to a Perl value by the following rules.
.SS "\s-1SPVM\s0 void to Perl undef"
.IX Subsection "SPVM void to Perl undef"
\&\s-1SPVM\s0 void return value is converted to Perl \f(CW\*(C`undef\*(C'\fR. This is only for specification and has no meaning.
.SS "\s-1SPVM\s0 byte to Perl scalar"
.IX Subsection "SPVM byte to Perl scalar"
\&\s-1SPVM\s0 byte value(same type as int8_t of C language) is converted to Perl scalar by newSViv function of perlapi <https://perldoc.perl.org/perlapi#newSViv>.
.PP
.Vb 2
\&  int8_t spvm_byte_value = VALUE;
\&  SV* perl_scalar = newSViv(spvm_byte_value);
.Ve
.SS "\s-1SPVM\s0 short to Perl scalar"
.IX Subsection "SPVM short to Perl scalar"
\&\s-1SPVM\s0 short value(same type as int16_t of C language) is converted to Perl scalar by newSViv function of perlapi <https://perldoc.perl.org/perlapi#newSViv>.
.PP
.Vb 2
\&  int16_t spvm_short_value = VALUE;
\&  SV* perl_scalar = newSViv(spvm_short_value);
.Ve
.SS "\s-1SPVM\s0 int to Perl scalar"
.IX Subsection "SPVM int to Perl scalar"
\&\s-1SPVM\s0 int value(same type as int32_t of C language) is converted to Perl scalar by newSViv function of perlapi <https://perldoc.perl.org/perlapi#newSViv>.
.PP
.Vb 2
\&  int32_t spvm_int_value = VALUE;
\&  SV* perl_scalar = newSViv(spvm_int_value);
.Ve
.SS "\s-1SPVM\s0 long to Perl scalar"
.IX Subsection "SPVM long to Perl scalar"
\&\s-1SPVM\s0 long value(same type as int64_t of C language) is converted to Perl scalar by newSViv function of perlapi <https://perldoc.perl.org/perlapi#newSViv>.
.PP
.Vb 2
\&  int64_t spvm_long_value = VALUE;
\&  SV* perl_scalar = newSViv(spvm_long_value);
.Ve
.SS "\s-1SPVM\s0 float to Perl scalar"
.IX Subsection "SPVM float to Perl scalar"
\&\s-1SPVM\s0 float value(same type as float of C language) is converted to Perl scalar by newSVnv function of perlapi <https://perldoc.perl.org/perlapi#newSVnv>.
.PP
.Vb 2
\&  float spvm_float_value = VALUE;
\&  SV* perl_scalar = newSVnv(spvm_float_value);
.Ve
.SS "\s-1SPVM\s0 double to Perl scalar"
.IX Subsection "SPVM double to Perl scalar"
\&\s-1SPVM\s0 double value(same type as double of C language) is converted to Perl scalar by newSVnv function of perlapi <https://perldoc.perl.org/perlapi#newSVnv>.
.PP
.Vb 2
\&  double spvm_double_value = VALUE;
\&  SV* perl_scalar = newSVnv(spvm_double_value);
.Ve
.SS "\s-1SPVM\s0 string to Perl string"
.IX Subsection "SPVM string to Perl string"
\&\s-1SPVM\s0 string is converted to a Perl decoded string. If \s-1SPVM\s0 \f(CW\*(C`undef\*(C'\fR is returned, it is converted to Perl \f(CW\*(C`undef\*(C'\fR.
.SS "\s-1SPVM\s0 object to Perl object"
.IX Subsection "SPVM object to Perl object"
a \s-1SPVM\s0 object(not contain array) is converted to a Perl object which class name is same as \s-1SPVM\s0 class name and inherits SPVM::BlessedObject::Class.
.SS "\s-1SPVM\s0 multi numeric value to Perl hash reference"
.IX Subsection "SPVM multi numeric value to Perl hash reference"
\&\s-1SPVM\s0 multi numeric value is converted to Perl hash reference which keys is the field names of multi numeric type. The rules of number convertions of the field of multi numeric value is same as above the numeric convertions(byte, short, int, long, float, double).
.SS "\s-1SPVM\s0 array to Perl array object"
.IX Subsection "SPVM array to Perl array object"
a \s-1SPVM\s0 array is converted to a Perl SPVM::BlessedObject::Array object. If \s-1SPVM\s0 return value is \f(CW\*(C`undef\*(C'\fR, it is converted to Perl \f(CW\*(C`undef\*(C'\fR.
.SS "\s-1SPVM\s0 object to Perl object"
.IX Subsection "SPVM object to Perl object"
a \s-1SPVM\s0 object is converted to a Perl object which class name is same as \s-1SPVM\s0 class name and inherits SPVM::BlessedObject::Class.
