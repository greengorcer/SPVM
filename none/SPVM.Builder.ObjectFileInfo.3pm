.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Builder::ObjectFileInfo 3"
.TH SPVM::Builder::ObjectFileInfo 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Builder::ObjectFileInfo \- Object file information
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSPVM::Builder::ObjectFileInfo\fR is a object file information. This infromation is used by the linker.
.SH "FIELDS"
.IX Header "FIELDS"
Fields of \fBSPVM::Builder::ObjectFileInfo\fR.
.SS "object_file"
.IX Subsection "object_file"
.Vb 2
\&  my $object_file = $object_file\->object_file;
\&  $object_file\->object_file($object_file);
.Ve
.PP
Get and set the object file that is compiled.
.SS "source_file"
.IX Subsection "source_file"
.Vb 2
\&  my $source_file = $object_file\->source_file;
\&  $object_file\->source_file($source_file);
.Ve
.PP
Get and set the source file that is the source of the compiled object file.
.SS "cc"
.IX Subsection "cc"
.Vb 2
\&  my $cc = $object_file\->cc;
\&  $object_file\->cc($cc);
.Ve
.PP
Get and set the compiler name that compiled the object file.
.SS "ccflags"
.IX Subsection "ccflags"
.Vb 2
\&  my $ccflags = $object_file\->ccflags;
\&  $object_file\->ccflags($ccflags);
.Ve
.PP
Get and set the compiler flags that compiled the object file.
.SS "class_name"
.IX Subsection "class_name"
.Vb 2
\&  my $class_name = $object_file\->class_name;
\&  $object_file\->class_name($class_name);
.Ve
.PP
Get and set the class name belonged to when the object file was compiled.
.SS "is_resource"
.IX Subsection "is_resource"
.Vb 2
\&  my $is_resource = $object_file\->is_resource;
\&  $object_file\->is_resource($is_resource);
.Ve
.PP
Get and set if the object file(this is static library(.a)) is a resource.
.SS "is_exe_config"
.IX Subsection "is_exe_config"
.Vb 2
\&  my $is_exe_config = $object_file\->is_exe_config;
\&  $object_file\->is_exe_config($is_exe_config);
.Ve
.PP
Get and set if the object file is compiled using SPVM::Builder::Config::Exe.
.SH "METHODS"
.IX Header "METHODS"
Methods of \fBSPVM::Builder::ObjectFileInfo\fR.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $object_file = SPVM::Builder::ObjectFileInfo\->new;
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 1
\&  my $object_file_name = $object_file\->to_string;
.Ve
.PP
Get object file name. This is same as \f(CW\*(C`object_file\*(C'\fR field.
.SH "OPERATORS"
.IX Header "OPERATORS"
SPVM::BlessedObject::String overloads the following operators.
.SS "bool"
.IX Subsection "bool"
.Vb 1
\&  my $bool = !!$object_file;
.Ve
.PP
Always true.
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $object_file_name = "$object_file";
.Ve
.PP
Alias for \*(L"to_string\*(R".
