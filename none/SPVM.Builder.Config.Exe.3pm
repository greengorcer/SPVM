.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Builder::Config::Exe 3"
.TH SPVM::Builder::Config::Exe 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Builder::Config::Exe \- Configurations of creating excutable files.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SPVM::Builder::Config::Exe is configuration of creating excutable files of spvmcc.
.SH "FIELDS"
.IX Header "FIELDS"
Fields of \fBSPVM::Builder::Config::Exe\fR.
.PP
Fields are inherited from SPVM::Builder::Config and you can use the following fields.
.SS "global_cc_each"
.IX Subsection "global_cc_each"
.Vb 2
\&  my $global_cc_each = $config\->global_cc_each;
\&  $config\->global_cc_each($global_cc_each);
.Ve
.PP
Get and set a global callback that returns the compiler name for each source file. The call back receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.IP "\(bu" 2
cc
.Sp
The compiler name that is the value after the process of the process of cc or cc_each of SPVM::Builder::Config.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->global_cc_each(sub {
\&    my ($config, $args) = @_;
\&
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&
\&    # The compiler name
\&    my $cc = $args\->{cc};
\&    
\&    my $global_cc;
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $global_cc = \*(Aqclang\*(Aq;
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $global_cc = \*(Aqclang++\*(Aq;
\&    }
\&    
\&    return $global_cc;
\&  });
.Ve
.SS "global_ccflags_each"
.IX Subsection "global_ccflags_each"
.Vb 2
\&  my $global_ccflags_each = $config\->global_ccflags_each;
\&  $config\->global_ccflags_each($global_ccflags_each);
.Ve
.PP
Get and set a callback that returns the compiler flags for each source file. The call back receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.IP "\(bu" 2
cc
.Sp
The compiler name that is the value after the process of the process of cc or cc_each of SPVM::Builder::Config.
.IP "\(bu" 2
ccflags
.Sp
The compiler flags that is the value after the process of the process of ccflags or ccflags_each of SPVM::Builder::Config.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->global_ccflags_each(sub {
\&    my ($config, $args) = @_;
\&
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&
\&    # The compiler name
\&    my $cc = $args\->{cc};
\&
\&    # The compiler name
\&    my $ccflags = $args\->{ccflags};
\&    
\&    my $global_ccflags = [];
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $global_ccflags = [\*(Aq\-DFoo\*(Aq, @$ccflags];
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $global_ccflags = [\*(Aq\-DBar\*(Aq, @$ccflags];
\&    }
\&    
\&    return $global_ccflags;
\&  });
.Ve
.SS "global_optimize_each"
.IX Subsection "global_optimize_each"
.Vb 2
\&  my $global_optimize_each = $config\->global_optimize_each;
\&  $config\->global_optimize_each($global_optimize_each);
.Ve
.PP
Get and set a callback that returns the compiler flags for each source file. The call back receives SPVM::Bulder::Config object and optional arguments as a hash reference.
.PP
\&\fBOptional Arguments:\fR
.IP "\(bu" 2
source_file
.Sp
Each source file.
.IP "\(bu" 2
class_name
.Sp
The class name
.IP "\(bu" 2
cc
.Sp
The compiler name that is the value after the process of the process of cc or cc_each of SPVM::Builder::Config.
.IP "\(bu" 2
optimize
.Sp
The value of optimize that is the value after the process of the process of optimize or optimize_each of SPVM::Builder::Config.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&  $config\->global_optimize_each(sub {
\&    my ($config, $args) = @_;
\&
\&    # Source file
\&    my $source_file = $args\->{source_file};
\&    
\&    # Class name
\&    my $class_name = $args\->{class_name}
\&
\&    # The compiler name
\&    my $cc = $args\->{cc};
\&
\&    # The compiler name
\&    my $optimize = $args\->{optimize};
\&    
\&    my $global_optimize;
\&    # C source file
\&    if ($source_file =~ /\e.c$/) {
\&      $global_optimize = \*(Aq\-O3\*(Aq;
\&    }
\&    # C++ source file
\&    elsif ($source_file =~ /\e.cpp$/) {
\&      $global_optimize = \*(Aq\-O3\*(Aq;
\&    }
\&    
\&    return $global_optimize;
\&  });
.Ve
.SH "METHODS"
.IX Header "METHODS"
Methods of \fBSPVM::Builder::Config::Exe\fR.
.PP
Methods are inherited from SPVM::Builder::Config and you can use the following methods.
.SS "is_exe"
.IX Subsection "is_exe"
.Vb 1
\&  my $is_exe = $config\->is_exe;
.Ve
.PP
Check this config is used for creating executalbe file. Always 1.
