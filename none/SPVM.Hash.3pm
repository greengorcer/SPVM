.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Hash 3"
.TH SPVM::Hash 3 "2022-01-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Hash \- Hash in SPVM | Hash Data Structure
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  use Hash;
\&  
\&  # Create hash
\&  my $book = Hash\->new({});
\&  
\&  $book\->set_int(id => 4);
\&  $book\->set_string(name => "Perl");
\&  $book\->set_double(price => 3000.0);
\&  
\&  my $id = (int)$book\->get_int("id");
\&  my $name = (string)$book\->get_string("name");
\&  my $price = (double)$book\->get_double("price");
\&  
\&  # Create hash with key value pairs
\&  my $book = Hash\->new({id => 4, name => "Perl", price => 3000.0});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Hash is Hash Data Structure. This is generally called associative array.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    static method new : Hash ($key_values : oarray)
.Ve
.PP
Create a new Hash object with key value pairs.
.PP
.Vb 2
\&  # Create hash
\&  my $book = Hash\->new({});
\&
\&  # Create hash with key value pairs
\&  my $book = Hash\->new({id => 4, name => "Perl"});
.Ve
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "count"
.IX Subsection "count"
.Vb 1
\&  count : int ()
.Ve
.PP
Count keys.
.SS "copy"
.IX Subsection "copy"
.Vb 1
\&  copy : Hash ()
.Ve
.PP
Copy hash.
.PP
This is not deep copy. Address of keys and values is copied into new hash.
.SS "delete"
.IX Subsection "delete"
.Vb 1
\&  delete : object ($key : string)
.Ve
.PP
Delete a key value pair. Deleted value is returned.
.SS "exists"
.IX Subsection "exists"
.Vb 1
\&  exists : int ($key : string)
.Ve
.PP
Specify the key and check if the value exists. If exists, return 1, otherwise 0.
.SS "keys"
.IX Subsection "keys"
.Vb 1
\&  keys : string[] ()
.Ve
.PP
Get keys. This method do not copy the strings.
.SS "values"
.IX Subsection "values"
.Vb 1
\&  values : object[] ()
.Ve
.PP
Get values.
.SS "get"
.IX Subsection "get"
.Vb 1
\&  get : object ($key : string)
.Ve
.PP
Get a value.
.SS "get_byte"
.IX Subsection "get_byte"
.Vb 1
\&  get_byte : byte ($name : string)
.Ve
.PP
Get value with a key. the value is converted to byte type.
.SS "get_short"
.IX Subsection "get_short"
.Vb 1
\&  get_short : short ($name : string)
.Ve
.PP
Get value with a key. the value is converted to short type.
.SS "get_int"
.IX Subsection "get_int"
.Vb 1
\&  get_int : int ($name : string)
.Ve
.PP
Get value with a key. the value is converted to int type.
.SS "get_long"
.IX Subsection "get_long"
.Vb 1
\&  get_long : long ($name : string)
.Ve
.PP
Get value with a key. the value is converted to long type.
.SS "get_float"
.IX Subsection "get_float"
.Vb 1
\&  get_float : float ($name : string)
.Ve
.PP
Get value with a key. the value is converted to float type.
.SS "get_double"
.IX Subsection "get_double"
.Vb 1
\&  get_double : double ($name : string)
.Ve
.PP
Get value with a key. the value is converted to double type.
.SS "set"
.IX Subsection "set"
.Vb 1
\&  set : void ($key : string, $val : object)
.Ve
.PP
Set key value pair.
.SS "set_byte"
.IX Subsection "set_byte"
.Vb 1
\&  set_byte : void ($name : string, $value : byte)
.Ve
.PP
Set key and value pair. byte value is converted to Byte object.
.SS "set_short"
.IX Subsection "set_short"
.Vb 1
\&  set_short : void ($name : string, $value : short)
.Ve
.PP
Set key and value pair. short value is converted to Short object.
.SS "set_int"
.IX Subsection "set_int"
.Vb 1
\&  set_int : void ($name : string, $value : int)
.Ve
.PP
Set key and value pair. int value is converted to Int object.
.SS "set_long"
.IX Subsection "set_long"
.Vb 1
\&  set_long : void ($name : string, $value : long)
.Ve
.PP
Set key and value pair. long value is converted to Long object.
.SS "set_float"
.IX Subsection "set_float"
.Vb 1
\&  set_float : void ($name : string, $value : float)
.Ve
.PP
Set key and value pair. float value is converted to Float object.
.SS "set_double"
.IX Subsection "set_double"
.Vb 1
\&  set_double : void ($name : string, $value : double)
.Ve
.PP
Set key and value pair. double value is converted to Double object.
.SS "set_string"
.IX Subsection "set_string"
.Vb 1
\&  set_string : void ($name : string, $value : string)
.Ve
.PP
Set key and value pair with string value.
