class Point3D extends Point {
  
  # Fields
  has z : rw protected int;
  
  # Class method
  static method new : Point3D ($x = 0 : int, $y = 0 : int, $z = 0 : int) {
    my $self = new Point3D;
    
    $self->{x} = $x;
    $self->{y} = $y;
    $self->{z} = $z;
    
    return $self;
  }
  
  # Class methods
  static method new_xyz : Point3D ($x : int, $y : int, $z : int) {
    warn "Point3D->new_xyz(\$x, \$y, \$z) is deprecated. Use Point3D->new(\$x, \$y, \$z) instead. This method will be removed after 2022-09-03";
    return &new($x, $y, $z);
  }
  
  # Instance methods
  method pointable : int () { return 1; }
  
  method clear : void () {
    $self->SUPER::clear;
    $self->{z} = 0;
  }
  
  method cloneable_clone : object () {
    my $self_clone = Point3D->new($self->x, $self->y, $self->z);
    
    return $self_clone;
  }
  
  method to_string : string () {
    my $x = $self->x;
    my $y = $self->y;
    my $z = $self->z;
    
    my $string = "($x,$y,$z)";
    
    return $string;
  }
}
