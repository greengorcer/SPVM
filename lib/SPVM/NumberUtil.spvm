package NumberUtil : precompile {
  use Time (time);
  
  INIT {
    srand(time());
  }
  
  sub INT8_MIN : byte () { return -128; }
  sub INT8_MAX : byte () { return 127; }

  sub INT16_MIN : short () { return -32768; }
  sub INT16_MAX : short () { return 32767; }

  sub INT32_MIN : int () { return -2147483648; }
  sub INT32_MAX : int () { return 2147483647; }

  sub INT64_MIN : long () { return -9223372036854775808L; }
  sub INT64_MAX : long () { return 9223372036854775807L; }

  sub UINT8_MAX : byte () { return (byte)0xFF; }
  sub UINT16_MAX : short () { return (short)0xFFFF; }
  sub UINT32_MAX : int () { return 0xFFFFFFFF; }
  sub UINT64_MAX : long () { return 0xFFFFFFFFFFFFFFFFL; }
  
  native sub RAND_MAX : int ();
    
  native sub DBL_MAX : double ();
  native sub DBL_MIN : double ();

  native sub FLT_MAX : float ();
  native sub FLT_MIN : float();
  
  native sub srand : void ($seed : long);
  native sub crand : int ();
  
  sub rand : double () {
    
    # 0 <= random_number < 1
    my $random_number = (double)crand() / ((double)RAND_MAX() + 1);
    
    return $random_number;
  }
}
