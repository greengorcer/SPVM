package SPVM::List : precompile {
  use SPVM::ArrayUtil(new_array_proto);
  
  has values   : oarray;
  has capacity : ro int;
  has length   : ro int;

  private enum {
    DEFAULT_CAPACITY = 16,
  }
  sub new : SPVM::List ($objects : oarray) {
    
    unless ($objects) {
      die "First argument must not be undef";
    }
    
    my $self = new SPVM::List;
    my $length = @$objects;
    
    my $capacity = 0;
    if ($length < DEFAULT_CAPACITY()) {
      $capacity = DEFAULT_CAPACITY();
    }
    else {
      $capacity = $length;
    }
    $self->{capacity} = $capacity;
    
    $self->{values} = new_array_proto($objects, $capacity);
    for (my $i = 0; $i < @$objects; ++$i) {
      $self->{values}[$i] = $objects->[$i];
    }
    $self->{length} = @$objects;

    return $self;
  }

  sub new_len : SPVM::List ($proto_array : oarray, $length : int) {
    unless ($proto_array) {
      die "First argument must not be undef";
    }
    
    my $self = new SPVM::List;
    unless ($length >= 0) {
      die "length must be more than or equals to zero";
    }
    my $capacity = 0;
    if ($length < DEFAULT_CAPACITY()) {
      $capacity = DEFAULT_CAPACITY();
    }
    else {
      $capacity = $length;
    }
    $self->{capacity} = $capacity;
    $self->{length} = $length;
    $self->{values} = new_array_proto($proto_array, $capacity);
    return $self;
  }
  
  sub insert : void ($self : self, $index : int, $value : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($index >= 0 && $index <= $length) {
      die "Out of range";
    }
    
    if ($length >= $capacity) {
      $self->_extend;
    }
    
    my $values = $self->{values};
    if ($index != $length) {
      for (my $i = $length - 1; $i >= $index; $i--) {
        $values->[$i + 1] = $values->[$i];
      }
    }
    $values->[$index] = $value;
    
    $self->{length}++;
  }

  sub remove : object ($self : self, $index : int) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    unless ($index >= 0 && $index < $length) {
      die "Out of range";
    }
    
    my $values = $self->{values};
    my $remove_value = $values->[$index];

    for (my $i = $index; $i < $length - 1; $i++) {
      $values->[$i] = $values->[$i + 1];
    }
    $values->[$length - 1] = undef;
    
    $self->{length}--;
    
    return $remove_value;
  }

  sub push : void ($self : self, $value : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};

    if ($length >= $capacity) {
      $self->_extend;
    }
    my $index = $self->{length};
    $self->{values}[$index] = $value;
    ++$self->{length};
  }
  
  sub pop : object ($self : self) {
    if ($self->{length} <= 0) {
      die "Length must be more than 0 for pop";
    }
    
    my $index = $self->{length};
    
    my $ret = $self->{values}[$index - 1];
    
    $self->{values}[$index - 1] = undef;
    
    --$self->{length};
    
    return $ret;
  }

  sub unshift : void ($self : self, $value : object) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    if ($length >= $capacity) {
      $self->_extend;
    }
    
    my $values = $self->{values};
    
    for (my $i = 0; $i < $length; $i++) {
      $values->[$length - $i] = $values->[$length - $i - 1];
    }
    
    $values->[0] = $value;
    $self->{length}++;
  }

  sub shift : object ($self : self) {
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    if ($length == 0) {
      die "Length must be more than 0 for shift";
    }
    
    my $values = $self->{values};
    
    my $value = $values->[0];
    
    for (my $i = 0; $i < $length - 1; $i++) {
      $values->[$i] = $values->[$i + 1];
    }
    $values->[$length - 1] = undef;
    
    $self->{length}--;
    
    return $value;
  }

  sub set : void ($self : self, $index : int, $value : object) {
    my $length = $self->length;

    if ($index < 0 || $index > $length - 1) {
      die "Out of range";
    }
    
    $self->{values}[$index] = $value;
  }

  sub get : object ($self : self, $index : int) {
    my $length = $self->length;

    if ($index < 0 || $index > $length - 1) {
      die "Out of range";
    }
    
    return $self->{values}[$index];
  }

  private sub _extend_with_capacity : void ($self : self, $new_capacity : int) {
    my $new_values = new_array_proto($self->{values}, $new_capacity);
    for (my $i = 0; $i < $self->{length}; ++$i) {
      my $target = $i;
      if ($target < 0) { $target += $self->{capacity}; };
      $new_values->[$i] = $self->{values}[$target];
    }
    $self->{capacity} = $new_capacity;
    $self->{values} = $new_values;
  }

  private sub _extend : void ($self : self) {
    my $capacity = $self->{capacity};
    my $length = $self->{length};
    my $values = $self->{values};
    
    my $new_capacity = $capacity * 2;
    
    my $new_values = new_array_proto($self->{values}, $new_capacity);
    
    for (my $i = 0; $i < $length; $i++) {
      $new_values->[$i] = $values->[$i];
    }
    
    $self->{values} = $new_values;
    $self->{capacity} = $new_capacity;
  }
  
  sub resize : void ($self : self, $new_length : int) {
    if ($new_length < 0) {
      die "New length must be more than or equals to 0";
    }
    
    my $length = $self->{length};
    my $capacity = $self->{capacity};
    
    if ($new_length > $length) {
      if ($new_length > $capacity) {
        $self->_extend_with_capacity($new_length);
      }
    }
    elsif ($new_length < $length) {
      for (my $i = $new_length; $i < $length; $i++) {
        $self->{values}[$i] = undef;
      }
    }
    $self->{length} = $new_length;
  }
  sub to_array : oarray ($self : self) {
    my $length = $self->{length};
    my $objects = new_array_proto($self->{values}, $length);
    for (my $i = 0; $i < $length; $i++) {
      $objects->[$i] = $self->{values}[$i];
    }
    return $objects;
  }
}
