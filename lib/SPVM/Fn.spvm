class Fn {
  use StringBuffer;
  use StringList;
  
  static method BYTE_MAX : byte () { return 127; }
  static method BYTE_MIN : byte () { return -128; }
  native static method DBL_MAX : double ();
  native static method DBL_MIN : double ();
  native static method DOUBLE_MAX : double ();
  native static method DOUBLE_MIN : double ();
  native static method FLOAT_MAX : float ();
  native static method FLOAT_MIN : float();
  native static method FLT_MAX : float ();
  native static method FLT_MIN : float();
  static method INT16_MAX : short () { return 32767; }
  static method INT16_MIN : short () { return -32768; }
  static method INT32_MAX : int () { return 2147483647; }
  static method INT32_MIN : int () { return -2147483648; }
  static method INT64_MAX : long () { return 9223372036854775807L; }
  static method INT64_MIN : long () { return -9223372036854775808L; }
  static method INT8_MAX : byte () { return 127; }
  static method INT8_MIN : byte () { return -128; }
  static method INT_MAX : int () { return 2147483647; }
  static method INT_MIN : int () { return -2147483648; }
  static method LONG_MAX : long () { return 9223372036854775807L; }
  static method LONG_MIN : long () { return -9223372036854775808L; }
  native static method RAND_MAX : int ();
  static method SHORT_MAX : short () { return 32767; }
  static method SHORT_MIN : short () { return -32768; }
  static method UBYTE_MAX : byte () { return (byte)0xFF; }
  static method UINT16_MAX : short () { return (short)0xFFFF; }
  static method UINT32_MAX : int () { return 0xFFFFFFFF; }
  static method UINT64_MAX : long () { return 0xFFFFFFFFFFFFFFFFL; }
  static method UINT8_MAX : byte () { return (byte)0xFF; }
  static method UINT_MAX : int () { return 0xFFFFFFFF; }
  static method ULONG_MAX : long () { return 0xFFFFFFFFFFFFFFFFL; }
  static method USHORT_MAX : short () { return (short)0xFFFF; }
  
  static method abs : int ($value : int) {
    
    my $abs = 0;
    if ($value > 0) {
      $abs = $value;
    }
    else {
      $abs = -$value;
    }
    return $abs;
  }
  
  static method chomp : void ($string : mutable string) {
    
    unless ($string) {
      return;
    }
    
    my $length = length $string;
    if ($length > 0) {
      if ($string->[$length - 1] == '\n') {
        &shorten($string, $length - 1);
      }
    }
  }
  
  static method chompr : string ($string : string) {
    unless ($string) {
      return undef;
    }
    
    my $new_string : string;
    my $length = length $string;
    if ($length == 0) {
      $new_string = copy $string;
    }
    else {
      if ($string->[$length - 1] == '\n') {
        $new_string = &substr($string, 0, $length - 1);
      }
      else {
        $new_string = copy $string;
      }
    }
    
    return $new_string;
  }
  
  static method chr : string ($code_point : int) {
    
    my $is_unicode_scalar_value = &is_unicode_scalar_value($code_point);
    my $utf8_char = (string)undef;
    if ($is_unicode_scalar_value) {
      $utf8_char = &_chr_native($code_point);
    }
    
    return $utf8_char;
  }
  
  static method contains : int ($string : string, $substring : string) {
    unless ($string) {
      die "The string must be defined";
    }
    
    unless ($substring) {
      die "The substring must be defined";
    }
    
    my $contains = 0;
    if (&index($string, $substring, 0) >= 0) {
      $contains = 1;
    }
    return $contains;
  }
  
  static method copy_string : string ($string : string) {
    return copy $string;
  }
  
  native static method crand : int ($seed : int*);
  
  native static method get_next_code_point : int ($str : string, $offset_ref : int*);
  
  precompile static method hex : int ($hex_string : string) {
    
    unless ($hex_string) {
      die "The hex string must be defined";
    }
    
    my $hex_value = 0;
    my $digit = 0;
    my $value = 0;
    my $length = length $hex_string;
    unless ($length >= 1 && $length <= 8) {
      die "The length of the hex string must be 1 to 8";
    }
    for (my $i = $length - 1; $i >= 0; $i--) {
      my $ascii_code = $hex_string->[$i];
      
      unless (&is_hex_digit($ascii_code)) {
        die "The hex string must contain only hex characters";
      }
      
      my $digit_value = 0;
      if ($ascii_code >= '0' && $ascii_code <= '9') {
        $digit_value = $ascii_code - 48;
      }
      elsif ($ascii_code >= 'a' && $ascii_code <= 'f') {
        $digit_value = $ascii_code - 87;
      }
      elsif ($ascii_code >= 'A' && $ascii_code <= 'F') {
        $digit_value = $ascii_code - 55;
      }
      $value += $digit_value * &powi(16, $digit);
      
      $digit += 1;
    }
    
    return $value;
  }
  
  static method index : int ($string : string, $substring : string, $offset : int) {
    return &index_len($string, $substring, $offset, length $string);
  }
  
  precompile static method index_len : int ($string : string, $substring : string, $offset : int, $max_length : int) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    unless ($substring) {
      die "The substring must be defined";
    }
    
    unless ($offset >= 0) {
      die "The offset must be greater than or equal to 0";
    }
    
    unless ($max_length >= 0) {
      die "The max length must be greater than or equal to 0";
    }
    
    my $substring_length = length $substring;
    
    if ($max_length > length $string) {
      $max_length = length $string;
    }
    
    if ($offset >= $max_length) {
      my $ret : int;
      if ($substring_length == 0) {
        $ret = $max_length;
      }
      else {
        $ret = -1;
      }
      return $ret;
    }
    if ($offset < 0) {
      $offset = 0;
    }
    if ($substring_length == 0) {
      return $offset;
    }
    
    my $first : byte  = $substring->[0];
    my $max : int = ($max_length - $substring_length);
    
    for (my $i = $offset; $i <= $max; $i++) {
      if ($string->[$i] != $first) {
        while (++$i <= $max && $string->[$i] != $first) {}
      }
      
      if ($i <= $max) {
        my $j = $i + 1;
        my $end = $j + $substring_length - 1;
        for (my $k = 01; $j < $end && $string->[$j] == $substring->[$k]; ($j++, $k++)) {}
        
        if ($j == $end) {
          return $i;
        }
      }
    }
    return -1;
  }
  
  static method is_alnum : int ($code_point : int) {
    
    if (($code_point >= 'A' && $code_point <= 'Z') || ($code_point >= 'a' && $code_point <= 'z') || ($code_point >= '0' && $code_point <= '9')) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_alpha : int ($code_point : int) {
    
    if (($code_point >= 'A' && $code_point <= 'Z') || ($code_point >= 'a' && $code_point <= 'z')) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  native static method is_array : int ($object : object);
  
  static method is_blank : int ($code_point : int) {
    
    if ($code_point >= ' ' ||  $code_point <= '\t') {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_cntrl : int ($code_point : int) {
    
    if (($code_point >= 0x00 && $code_point <= 0x1f) || $code_point == 0x7f) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_digit : int ($code_point : int) {
    
    if ($code_point >= '0' && $code_point <= '9') {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_graph : int ($code_point : int) {
    
    if ($code_point >= 0x21 && $code_point <= 0x7e) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_hex_digit : int ($code_point : int) {
    
    if (($code_point >= '0' && $code_point <= '9') || ($code_point >= 'a' && $code_point <= 'f') || ($code_point >= 'A' && $code_point <= 'F')) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_lower : int ($code_point : int) {
    
    if ($code_point >= 'a' && $code_point <= 'z') {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  native static method is_mulnum_array : int ($object : object);
  
  native static method is_numeric_array : int ($object : object);
  
  native static method is_object_array : int ($object : object);
  
  # This is same as Perl \s
  static method is_perl_space : int ($code_point : int) {
    my $ispspace = 0;
    switch ($code_point) {
      case ' ':
      case '\r':
      case '\n':
      case '\t':
      case '\f':
      {
        $ispspace = 1;
        break;
      }
    }
    return $ispspace;
  }
  
  static method is_perl_word : int ($code_point : int) {
    my $ispword = 0;
    
    if ($code_point >= 'a' && $code_point <= 'z') {
      $ispword = 1;
    }
    elsif ($code_point >= 'A' && $code_point <= 'Z') {
      $ispword = 1;
    }
    elsif ($code_point == '_') {
      $ispword = 1;
    }
    elsif ($code_point >= '0' && $code_point <= '9') {
      $ispword = 1;
    }
    return $ispword;
  }
  
  static method is_print : int ($code_point : int) {
    
    if ($code_point >= 0x20 && $code_point <= 0x7e) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_punct : int ($code_point : int) {
    
    if (($code_point >= 0x21 && $code_point <= 0x2f) || ($code_point >= 0x3a && $code_point <= 0x40) || ($code_point >= 0x5b && $code_point <= 0x60) || ($code_point >= 0x7b && $code_point <= 0x7e)) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_space : int ($code_point : int) {
    
    if (($code_point >= 0x09 && $code_point <= 0x0d) || $code_point == 0x20) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  private static method is_unicode_scalar_value : int ($code_point: int) {
    my $is_unicode_scalar_value = 0;
    # The range of Unicde code points
    if ($code_point >= 0 && $code_point <= 0x10FFFF) {
      # Not surrogate code points
      unless ($code_point >= 0xD800 && $code_point <= 0xDFFF) {
        $is_unicode_scalar_value = 1;
      }
    }
    
    return $is_unicode_scalar_value;
  }
  
  static method is_upper : int ($code_point : int) {
    
    if ($code_point >= 'A' && $code_point <= 'Z') {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  static method is_xdigit : int ($code_point : int) {
    
    if (($code_point >= 'A' && $code_point <= 'F') || ($code_point >= 'a' && $code_point <= 'f') || ($code_point >= '0' && $code_point <= '9')) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  precompile static method join : string ($sep : string, $strings : string[]) {
    unless ($sep) {
      die "The separator must be defined";
    }
    
    unless ($strings) {
      die "The strings must be defined";
    }
    
    my $join_buffer = StringBuffer->new;
    
    for (my $i = 0; $i < @$strings; $i++) {
      my $string = $strings->[$i];
      if ($string) {
        $join_buffer->push($string);
      }
      else {
        $join_buffer->push("");
      }
      if ($i != @$strings - 1) {
        $join_buffer->push($sep);
      }
    }
    
    my $join = $join_buffer->to_string;
    
    return $join;
  }
  
  static method labs : long ($value : long) {
    
    my $labs = 0L;
    if ($value > 0) {
      $labs = $value;
    }
    else {
      $labs = -$value;
    }
    return $labs;
  }
  
  precompile static method lc : string ($string : string) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $length = length $string;
    my $new_string = (mutable string)new_string_len($length);
    for (my $i = 0; $i < $length; $i++) {
      my $char = $string->[$i];
      if ($char >= 'A' && $char <= 'Z') {
        $new_string->[$i] = (byte)($string->[$i] + 32);
      }
      else {
        $new_string->[$i] = $string->[$i];
      }
    }
    return $new_string;
  }
  
  precompile static method lcfirst : string ($string : string) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $length = length $string;
    my $new_string = (mutable string)new_string_len($length);
    if ($length > 0) {
      my $char = $string->[0];
      if ($char >= 'A' && $char <= 'Z') {
        $new_string->[0] = (byte)($char + 32);
      }
      else {
        $new_string->[0] = $char;
      }
    }
    for (my $i = 1; $i < $length; ++$i) {
      $new_string->[$i] = $string->[$i];
    }
    return $new_string;
  }
  
  static method look_next_code_point : int ($string : string, $offset_ref : int*) {
    my $save_offset = $$offset_ref;
    my $code_point = &get_next_code_point($string, $offset_ref);
    $$offset_ref = $save_offset;
    return $code_point;
  }
  
  native static method memcpy : void ($dest : object, $dest_offset : int, $source : object, $source_offset : int, $length : int);
  
  native static method memmove : void ($dest : object, $dest_offset : int, $source : object, $source_offset : int, $length : int);
  
  static method ord : int ($utf8_char : string) {
    unless ($utf8_char) {
      die "The UTF-8 character must be defined";
    }
    
    my $utf8_char_length = length $utf8_char;
    unless ($utf8_char_length > 0) {
      die "The length of the UTF-8 character must be greater than to 0";
    }
    
    my $offset = 0;
    my $code_point = &get_next_code_point($utf8_char, \$offset);
    
    return $code_point;
  }
  
  precompile static method powi : int ($base : int, $exponant : int) {
    
    unless ($exponant >= 0) {
      die "The exponant value must be greater than or equal to 0";
    }
    
    if ($base == 0) {
      unless ($exponant != 0) {
        die "If the base value is 0, the exponant can't be 0";
      }
    }
    
    my $ret = 1;
    for (my $i = 0; $i < $exponant; $i++) {
      $ret = $ret * $base;
    }
    
    return $ret;
  }
  
  precompile static method powl : long ($base : long, $exponant : long) {
    unless ($exponant >= 0) {
      die "The exponant value must be greater than or equal to 0";
    }
    
    if ($base == 0) {
      unless ($exponant != 0) {
        die "If the base value is 0, the exponant can't be 0";
      }
    }
    
    my $ret = 1L;
    for (my $i = 0; $i < $exponant; $i++) {
      $ret = $ret * $base;
    }
    
    return $ret;
  }
  
  static method rand : double ($seed : int*) {
    
    # 0 <= random_number < 1
    my $random_number = (double)&crand($seed) / ((double)&RAND_MAX() + 1);
    
    return $random_number;
  }
  
  precompile static method repeat : string ($string : string, $count : int) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    unless ($count > 0) {
      die "The repeat count must be more than 0";
    }
    
    my $buffer = StringBuffer->new;
    for (my $i = 0; $i < $count; $i++) {
      $buffer->push($string);
    }
    my $repeat_string = $buffer->to_string;
    
    return $repeat_string;
  }
  
  static method rindex : int ($string : string, $substring : string, $offset : int) {
    return &rindex_len($string, $substring, $offset, length $string);
  }
  
  precompile static method rindex_len : int ($string : string, $substring : string, $offset : int, $max_length : int) {
    unless ($string) {
      die "The string must be defined";
    }
    
    unless ($substring) {
      die "The substring must be defined";
    }
    
    unless ($offset >= 0) {
      die "The offset must be greater than or equal to 0";
    }
    
    unless ($max_length >= 0) {
      die "The max length must be greater than or equal to 0";
    }
    
    my $substring_length = length $substring;
    
    if ($max_length > length $string) {
      $max_length = length $string;
    }
    
    my $substring_len = length $substring;
    if ($offset > $max_length - $substring_length) {
      $offset = $max_length - $substring_len;
    }
    for (my $i = $offset; $i >= 0; --$i) {
      my $match = 1;
      for (my $j = 0; $j < $substring_len; ++$j) {
        if ($string->[$i + $j] != $substring->[$j]) {
          $match = 0;
          last;
        }
      }
      if ($match) {
        return $i;
      }
    }
    return -1;
  }
  
  native static method shorten : void ($string : mutable string, $length : int);
  
  precompile static method split : string[] ($sep : string, $string : string) {
    unless ($sep) {
      die "The separator must be defined";
    }
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $string_length = length $string;
    my $sep_length = length $sep;
    
    unless ($sep_length > 0) {
      die "The length of the separator must be greater than 0";
    }
    
    my $separated_strings_list = StringList->new_len(0);
    
    my $match_start = 0;
    my $string_base = 0;
    for (my $string_index = 0; $string_index < $string_length; $string_index++) {
      if ($string->[$string_index] == $sep->[0]) {
        $match_start = 1;
      }
      
      if ($match_start) {
        my $match = 1;
        for (my $sep_index = 0; $sep_index < $sep_length; $sep_index++) {
          if ($string_index + $sep_index > $string_length - 1) {
            $match = 0;
            last;
          }
          else {
            unless ($string->[$string_index + $sep_index] == $sep->[$sep_index]) {
              $match = 0;
              last;
            }
          }
        }
        if ($match) {
          my $separated_string = &substr($string, $string_base, $string_index - $string_base);
          $separated_strings_list->push($separated_string);
          $string_base = $string_index + $sep_length;
          $string_index += $sep_length - 1;
        }
      }
    }
    if ($string_base == $string_length) {
      $separated_strings_list->push("");
    }
    else {
      my $separated_string = &substr($string, $string_base, $string_length - $string_base);
      $separated_strings_list->push($separated_string);
    }
    
    my $separated_strings = $separated_strings_list->to_array;
    
    return $separated_strings;
  }
  
  static method substr : string ($string : string, $offset : int, $length : int) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    unless ($offset >= 0) {
      die "The offset must be greater than or equal to 0";
    }
    
    unless ($length >= 0) {
      die "The length must be greater than or equal to 0";
    }
    
    my $string_length = length $string;
    
    unless ($offset + $length <= $string_length) {
      die "The offset + the length must be less than or equal to the length of the string";
    }
    
    my $substring = (mutable string)new_string_len($length);
    
    Fn->memcpy($substring, 0, $string, $offset, $length);
    
    return $substring;
  }
  
  native static method to_double : double ($string : string);
  
  native static method to_float : float ($string : string);
  
  static method to_int : int ($string : string) {
    return &to_int_with_base($string, 10);
  }
  
  native static method to_int_with_base : int ($string : string, $digit : int);
  
  static method to_long : long ($string : string) {
    return &to_long_with_base($string, 10);
  }
  native static method to_long_with_base : long ($string : string, $digit : int);
  
  static method to_lower : int ($code_point : int) {
    
    if ($code_point >= 'A' && $code_point <= 'Z') {
      $code_point = $code_point + 0x20;
    }
    return $code_point;
  }
  
  static method to_upper : int ($code_point : int) {
    
    if ($code_point >= 'a' && $code_point <= 'z') {
      $code_point = $code_point - 0x20;
    }
    return $code_point;
  }
  
  precompile static method trim : string ($string : string) {
    
    unless ($string) {
      return undef;
    }
    
    my $length = length $string;
    my $start_string_index = -1;
    my $end_string_index = -1;
    
    for (my $i = 0; $i < $length; $i++) {
      if ($start_string_index == -1) {
        if (&is_space($string->[$i])) {
          # Skip
        }
        else {
          $start_string_index = $i;
          last;
        }
      }
    }
    
    for (my $i = $length - 1; $i >= 0; $i--) {
      if ($end_string_index == -1) {
        if (&is_space($string->[$i])) {
          # Skip
        }
        else {
          $end_string_index = $i;
          last;
        }
      }
    }
    
    my $trimed_string : string;
    if ($start_string_index == -1 && $end_string_index == -1) {
      return "";
    }
    elsif ($end_string_index == -1) {
      $trimed_string = &substr($string, $start_string_index, $length - $start_string_index);
    }
    elsif ($end_string_index == -1) {
      $trimed_string = &substr($string, 0, $end_string_index + 1);
    }
    else {
      $trimed_string = &substr($string, $start_string_index, $end_string_index - $start_string_index + 1);
    }
    
    return $trimed_string;
  }
  
  static method trim_ascii_space : string ($string : string) {
    warn "Fn->trim_ascii_space is deprecated. Use Fn->trim isntead";
    return &trim($string);
  }
  
  precompile static method uc : string ($string : string) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $length = length $string;
    my $new_string = (mutable string)new_string_len($length);
    for (my $i = 0; $i < $length; $i++) {
      my $char = $string->[$i];
      if ($char >= 'a' && $char <= 'z') {
        $new_string->[$i] = (byte)($string->[$i] - 32);
      }
      else {
        $new_string->[$i] = $string->[$i];
      }
    }
    return $new_string;
  }
  
  precompile static method ucfirst : string ($string : string) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $length = length $string;
    my $new_string = (mutable string)new_string_len($length);
    if ($length > 0) {
      my $char = $string->[0];
      if ($char >= 'a' && $char <= 'z') {
        $new_string->[0] = (byte)($char - 32);
      }
      else {
        $new_string->[0] = $char;
      }
    }
    for (my $i = 1; $i < $length; ++$i) {
      $new_string->[$i] = $string->[$i];
    }
    return $new_string;
  }
  
  native static method _chr_native : string ($uchar : int);
}
