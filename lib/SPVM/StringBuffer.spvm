class StringBuffer {
  use Fn;
  use Array;
  
  # Fields
  has value : ro mutable string;
  has length : ro int;
  
  # Private fields
  has capacity : int;
  
  # Class methods
  static method new : StringBuffer () {
    my $self = new StringBuffer;
    $self->{value} = (mutable string)new_string_len(0);
    $self->{length} = 0;
    $self->{capacity} = 0;
    return $self;
  }
  
  # Instance methods
  method push : void ($string : string) {
    my $length = $self->{length};
    my $string_length = length $string;
    
    my $new_length = $length + $string_length;
    $self->_maybe_extend($new_length);
    
    Fn->memcpy($self->{value}, $length, $string, 0, $string_length);
    $self->{length} += $string_length;
  }
  
  method push_char : void ($char : byte) {
    my $length = $self->{length};
    
    my $new_length = $length + 1;
    $self->_maybe_extend($new_length);
    
    $self->{value}[$self->{length}++] = $char;
  }
  
  method replace : void ($offset : int, $remove_length : int, $replace : string) {
    unless ($offset >= 0) {
      die("The offset must be greater than or equal to 0");
    }
    
    unless ($remove_length >= 0) {
      die("The removing length must be greater than or equal to 0");
    }
    unless ($offset + $remove_length <= $self->{length}) {
      die("The offset + the removing lenght must be less than or equal to the length of the string buffer");
    }
    
    my $replace_length = 0;
    if ($replace) {
      $replace_length = length $replace;
    }
    
    my $new_length = $self->{length} - $remove_length + $replace_length;
    $self->_maybe_extend($new_length);
    
    my $move_length = $self->{length} - $offset - $remove_length;
    Fn->memmove($self->{value}, $offset + $replace_length, $self->{value}, $offset + $remove_length, $move_length);
    
    if ($replace) {
      Fn->memcpy($self->{value}, $offset, $replace, 0, $replace_length);
    }
    
    $self->{length} = $new_length;
  }
  
  method to_string : string () {
    my $string = Fn->substr($self->{value}, 0, $self->{length});
    return $string;
  }
  
  private method _maybe_extend : void ($min_capacity : int) {
    my $capacity = $self->{capacity};
    
    unless ($min_capacity > $capacity) {
      return;
    }
    
    if ($capacity < $min_capacity) {
      $capacity = $min_capacity;
    }
    
    my $new_capacity = $capacity * 2;
    my $new_value = (mutable string)new_string_len $new_capacity;
    
    my $length = $self->{length};
    my $value = $self->{value};
    
    Fn->memcpy($new_value, 0, $value, 0, $length);
    
    $self->{value} = $new_value;
    $self->{capacity} = $new_capacity;
  }
}
